[{"/Users/sojeong/madCamp_week3/src/index.js":"1","/Users/sojeong/madCamp_week3/src/App.js":"2","/Users/sojeong/madCamp_week3/src/Navbar.js":"3","/Users/sojeong/madCamp_week3/src/route/Profile.js":"4","/Users/sojeong/madCamp_week3/src/route/Login.js":"5","/Users/sojeong/madCamp_week3/src/route/Grid.js":"6","/Users/sojeong/madCamp_week3/src/route/TreeColumn.js":"7","/Users/sojeong/madCamp_week3/src/route/MyGarden.js":"8","/Users/sojeong/madCamp_week3/src/Sign/SignUp.js":"9","/Users/sojeong/madCamp_week3/src/route/Home.js":"10","/Users/sojeong/madCamp_week3/src/route/MyProfile.js":"11","/Users/sojeong/madCamp_week3/src/route/Tree.js":"12","/Users/sojeong/madCamp_week3/src/route/TreeList.js":"13","/Users/sojeong/madCamp_week3/src/route/MyTree.js":"14","/Users/sojeong/madCamp_week3/src/route/Test.js":"15","/Users/sojeong/madCamp_week3/src/route/Dialog.js":"16","/Users/sojeong/madCamp_week3/src/Sign/SignUpContainer.js":"17","/Users/sojeong/madCamp_week3/src/SidebarData.js":"18","/Users/sojeong/madCamp_week3/src/Sign/SignUpForm.js":"19","/Users/sojeong/madCamp_week3/src/Sign/validate.js":"20","/Users/sojeong/madCamp_week3/src/Sign/PasswordStr.js":"21","/Users/sojeong/madCamp_week3/src/Column.jsx":"22","/Users/sojeong/madCamp_week3/src/initial-data.js":"23","/Users/sojeong/madCamp_week3/src/route/DoneDialog.js":"24","/Users/sojeong/madCamp_week3/src/route/Timer.js":"25","/Users/sojeong/madCamp_week3/src/route/SetTimer.js":"26","/Users/sojeong/madCamp_week3/src/Task.jsx":"27"},{"size":179,"mtime":1611031437205,"results":"28","hashOfConfig":"29"},{"size":895,"mtime":1611059347104,"results":"30","hashOfConfig":"29"},{"size":1502,"mtime":1611031437203,"results":"31","hashOfConfig":"29"},{"size":741,"mtime":1611031437208,"results":"32","hashOfConfig":"29"},{"size":1909,"mtime":1611065092704,"results":"33","hashOfConfig":"29"},{"size":4184,"mtime":1611031437207,"results":"34","hashOfConfig":"29"},{"size":1473,"mtime":1611031437209,"results":"35","hashOfConfig":"29"},{"size":873,"mtime":1611065052543,"results":"36","hashOfConfig":"29"},{"size":610,"mtime":1611031437204,"results":"37","hashOfConfig":"29"},{"size":7446,"mtime":1611065017700,"results":"38","hashOfConfig":"29"},{"size":5592,"mtime":1611066391535,"results":"39","hashOfConfig":"29"},{"size":90,"mtime":1611031437209,"results":"40","hashOfConfig":"29"},{"size":5105,"mtime":1611031437209,"results":"41","hashOfConfig":"29"},{"size":1100,"mtime":1611037220322,"results":"42","hashOfConfig":"29"},{"size":10321,"mtime":1611031437208,"results":"43","hashOfConfig":"29"},{"size":2487,"mtime":1611065210188,"results":"44","hashOfConfig":"29"},{"size":3252,"mtime":1611043407638,"results":"45","hashOfConfig":"29"},{"size":577,"mtime":1611031437203,"results":"46","hashOfConfig":"29"},{"size":1997,"mtime":1611059273352,"results":"47","hashOfConfig":"29"},{"size":2054,"mtime":1611031437205,"results":"48","hashOfConfig":"29"},{"size":798,"mtime":1611031437204,"results":"49","hashOfConfig":"29"},{"size":2328,"mtime":1611043407637,"results":"50","hashOfConfig":"29"},{"size":1085,"mtime":1611043407639,"results":"51","hashOfConfig":"29"},{"size":1881,"mtime":1611031437206,"results":"52","hashOfConfig":"29"},{"size":2749,"mtime":1611040112237,"results":"53","hashOfConfig":"29"},{"size":4078,"mtime":1611064114743,"results":"54","hashOfConfig":"29"},{"size":1678,"mtime":1611062336543,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"16g871s",{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"87","usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"92","usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"58"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"/Users/sojeong/madCamp_week3/src/index.js",[],["121","122"],"/Users/sojeong/madCamp_week3/src/App.js",["123","124","125"],"import React from 'react';\nimport './style/App.css';\nimport Navbar from './Navbar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Profile from './route/Profile';\nimport MyGarden from './route/MyGarden';\nimport Home from './route/Home'\nimport SignUp from './Sign/SignUp'\nimport Timer from './route/TreeColumn'\nimport Grid from './route/Grid'\nimport Login from './route/Login'\nimport MyProfile from './route/MyProfile'\n\n\nclass App extends React.Component {\n  render(){\n  return (\n    <Router>\n      <Navbar />\n      <Switch>\n        <Route path='/signup' exact component={SignUp} />\n        <Route path='/login' exact component={Login} />\n        <Route path='/' exact component={Home} />\n        <Route path='/profile' component={MyProfile} />\n        <Route path='/mygarden' component={MyGarden} />\n      </Switch>\n    </Router>\n  );\n}\n}\n\nexport default App;","/Users/sojeong/madCamp_week3/src/Navbar.js",[],"/Users/sojeong/madCamp_week3/src/route/Profile.js",["126","127","128","129","130"],"import React, {Text} from \"react\";\nimport {Row, Col, Container} from \"react-bootstrap\"\nimport img_woman from '../Image/woman.png';\n// import \"../style/Profile.css\"\nimport '../style/MyProfile.css';\nclass Profile extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t  nickname: \"sojeong\",\n\t\t  password:\"1234\",\n\t\t  lifeCount:\"10\",\n\t\t  killCount:\"2\"\n\t\t  }  \n\t\t};\n\trender(){\n\treturn (\n\t\t<div className='Profile'>\n\t\t\t{/* <motion.div animate = {{scale:0.5}}/> */}\n\t\t\t<img src = {img_woman}/>\n\t\t\t<p>name : {this.state.nickname}</p>\n\t\t\t<p>PassWord : {this.state.password}</p>\n\t\t\t<p>plant count : {this.state.lifeCount}</p>\n\t\t\t<p>dead plant count : {this.state.killCount}</p>\n\n\t\t</div>\n\n\t);\n\t}\n}\n\n\nexport default Profile;","/Users/sojeong/madCamp_week3/src/route/Login.js",[],"/Users/sojeong/madCamp_week3/src/route/Grid.js",["131"],"import React, { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"../style/grid.css\"\nconst tree = [\"🍋\", \"🍊\", \"🍈\", \"👩‍🦰\", \"👨‍🦱\", \"👱‍♀️\", \"👨\", \"🧒\", \"👩‍🦳\", \"👸\"];\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    //id: tree [k+ offset],//-new Date().getTime(),\n    id:  `item-${k + offset}-${new Date().getTime()}`,\n    content: tree [k+ offset] \n    //content: `item ${k + offset}`\n  }));\n\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250\n});\n\nfunction Grid (){\n  const [state, setState] = useState([getItems(3)])\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     items: getItems(10)\n  //   };\n  //   this.onDragEnd = this.onDragEnd.bind(this);\n  // }\nfunction onDragEnd(result) {\n    const { source, destination } = result;\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    const sInd = +source.droppableId;\n    const dInd = +destination.droppableId;\n    if (sInd === dInd) {\n      const items = reorder(state[sInd], source.index, destination.index);\n      const newState = [...state];\n      newState[sInd] = items;\n      setState(newState);\n    } else {\n      const result = move(state[sInd], state[dInd], source, destination);\n      const newState = [...state];\n      newState[sInd] = result[sInd];\n      newState[dInd] = result[dInd];\n\n      setState(newState.filter(group => group.length));\n    }\n    // const items = reorder(\n    //   this.state.items,\n    //   result.source.index,\n    //   result.destination.index\n    // );\n\n    // this.setState({\n    //   items\n    // });\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n\n    return (\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"droppable\">\n          {(provided, snapshot) => (\n            <div className = \"grid\"\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n            >\n              {this.state.items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  \n}\n\nexport default Grid;\n","/Users/sojeong/madCamp_week3/src/route/TreeColumn.js",[],"/Users/sojeong/madCamp_week3/src/route/MyGarden.js",["132","133","134","135","136","137","138","139"],"/Users/sojeong/madCamp_week3/src/Sign/SignUp.js",["140","141","142","143","144"],"import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport Popup from 'reactjs-popup'\nimport Modal from 'react-modal'\nimport { Button } from 'reactstrap';\nimport SignUpContainer from \"./SignUpContainer\";\nimport MuiThemeProvider from \"material-ui/styles/MuiThemeProvider\";\n\nclass SignUp extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {name: \"hello\"};\n    }\n\n    render(){\n    return (\n        <MuiThemeProvider>\n            {this.props.children}\n            <SignUpContainer/>\n        </MuiThemeProvider>\n    );\n    }\n}\n\nexport default SignUp;","/Users/sojeong/madCamp_week3/src/route/Home.js",["145","146","147","148","149","150","151"],"/Users/sojeong/madCamp_week3/src/route/MyProfile.js",["152","153","154"],"/Users/sojeong/madCamp_week3/src/route/Tree.js",[],"/Users/sojeong/madCamp_week3/src/route/TreeList.js",["155","156"],"import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nconst tree = [\"🍋\", \"🍊\", \"🍈\"];\n// fake data generator\nconst getItems = (count, offset = 0) =>\n    \n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    //id: tree [k+ offset],//-new Date().getTime(),\n    id:  `item-${k + offset}-${new Date().getTime()}`,\n    content: tree [k+ offset] \n    //content: `item ${k + offset}`\n  }));\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250\n});\n\nfunction TreeList() {\n  const [state, setState] = useState([getItems(3)])\n  //= useState([getItems(3), getItems(5, 10)]);\n\n  function onDragEnd(result) {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n    const sInd = +source.droppableId;\n    const dInd = +destination.droppableId;\n\n    if (sInd === dInd) {\n      const items = reorder(state[sInd], source.index, destination.index);\n      const newState = [...state];\n      newState[sInd] = items;\n      setState(newState);\n    } else {\n      const result = move(state[sInd], state[dInd], source, destination);\n      const newState = [...state];\n      newState[sInd] = result[sInd];\n      newState[dInd] = result[dInd];\n\n      setState(newState.filter(group => group.length));\n    }\n  }\n\n  return (\n    <div>\n       {/* <button\n        type=\"button\"\n        onClick={() => {\n          setState([...state, []]);\n        }}\n      >\n        Add new group\n      </button> \n      <button\n        type=\"button\"\n        onClick={() => {\n          setState([...state, getItems(1)]);\n        }}\n      >\n        Add new item\n      </button>  */}\n      <div style={{ display: \"flex\" }}>\n        <DragDropContext onDragEnd={onDragEnd}>\n          {state.map((el, ind) => (\n            <Droppable key={ind} droppableId={`${ind}`}>\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                  {...provided.droppableProps}\n                >\n                  {el.map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id}\n                      index={index}\n                    >\n                      {(provided, snapshot) => (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          )}\n                        >\n                          <div\n                            style={{\n                              display: \"flex\",\n                              justifyContent: \"space-around\"\n                            }}\n                          >\n                            {item.content}\n                            {/* <button\n                              type=\"button\"\n                              onClick={() => {\n                                const newState = [...state];\n                                newState[ind].splice(index, 1);\n                                setState(\n                                  newState.filter(group => group.length)\n                                );\n                              }}\n                            >\n                              delete\n                            </button> */}\n                          </div>\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          ))}\n        </DragDropContext>\n      </div>\n    </div>\n  );\n}\n\nexport default TreeList;\n","/Users/sojeong/madCamp_week3/src/route/MyTree.js",[],"/Users/sojeong/madCamp_week3/src/route/Test.js",["157","158","159"],"import React, { Component } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport \"../style/Test.css\"\nconst tree = [\"🍋\", \"🍊\", \"🍈\"];\nconst ground = [\"🎅\", \"👩‍🎤\", \"👼\", \"👩‍🦰\",\"👨‍🦱\", \"👱‍♀️\", \"👨\", \"🧒\"]\n// const extension = [\"👨‍🦱\", \"👱‍♀️\", \"👨\", \"🧒\"]\n// [[\"👨‍🦱\", \"👱‍♀️\", \"👨\", \"🧒\"],\n//  [\"👩‍🦳\", \"👸\", \"🙂\",\"😠\"],\n//  [\"😔\",\"😖\",\"🙁\",\"🤬\"],\n//  [\"🥶\", \"😦\",\"🤢\", \"😈\"]];\n\n// // fake data generator\n// const getItems = (count, offset = 0) =>\n//     Array.from({ length: count }, (v, k) => k).map(k => ({\n//         id: `item-${k + offset}`,\n//         content: `item ${k + offset}`\n//     }));\n// const groundList =(count, offset =0)=> \n// const array\n// (tree.map((items, index) => {\n//     {items.map((subItem, sIndex) =>{\n//         id: `item==${sIndex + offset}`,\n//         content: tree [sIndex + offset] \n//     })}\n// }))\n\n\nconst treeList = (count, offset = 0) =>\n    Array.from({length: count},(v, k) => k).map(k => ({\n        id: `item==${k + offset}`,\n        content: tree [k+ offset] \n    }))\n\nconst groundList = (count, offset = 0) =>\n    Array.from({length: count},(v, k) => k).map(k => ({\n        id: `ite==${k + offset}`,\n        content: ground [k+ offset] \n    }))\n\n// const extensionList = (count, offset = 0) =>\n// Array.from({length: count},(v, k) => k).map(k => ({\n//     id: `ite==${k + offset}`,\n//     content: extension [k+ offset] \n// }))\n\n\n// a little function to help us with reordering the result\n// const reorder = (list, startIndex, endIndex) => {\n//     const result = Array.from(list);\n//     const [removed] = result.splice(startIndex, 1);\n//     result.splice(endIndex, 0, removed);\n\n//     return result;\n// };\n\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n    //source 움직인 쪽의 리스트, destClone 목적지 쪽의 리스트\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    console.log(sourceClone)\n    console.log(destClone)\n\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    //옮겨진 아이템 [removed]\n    console.log([removed])\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n};\n\nconst grid = 20;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid ,\n    margin: `${grid}px ${grid}px ${grid}px ${grid}px`,\n\n    // change background colour if dragging\n    background: isDragging ? 'grey' : 'grey',\n\n    // styles we need to apply on draggables\n    ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n    background: isDraggingOver ? 'lightgrey' : 'lightgrey',\n    padding: grid,\n    width: 250\n});\n\nclass test extends React.Component {\n    state = {\n        items: treeList(3),\n        //selected: extension[4][4]\n        selected: groundList(8),\n        //extension: extensionList(4)\n    };\n\n    id2List = {\n        droppable: 'items',\n        droppable2: 'selected',\n        //droppable3: 'extension'\n\n    };\n\n    getList = id => this.state[this.id2List[id]];\n  \n    onDragEnd = result => {\n        const { source, destination } = result;\n        // dropped outside the list\n        if (!destination) {\n            return;\n        }\n        //자기 자신으로 움직이는 경우 \n        if (source.droppableId === destination.droppableId) {\n            const items = reorder(this.getList(source.droppableId),source.index,destination.index);\n            let state = { items };\n            const newState = [state]\n            newState[source.droppableId] = items;\n            this.setState(newState)\n            \n            //this.setState(state);\n            // //모르겠음\n            // if (source.droppableId === 'droppable2') {\n            //     state = { selected: items };\n            // }\n\n        } else {\n            //움직인 상태 결과 값 \n            const result = move(this.getList(source.droppableId),this.getList(destination.droppableId),source,destination);\n            //this.setState({items: result.droppable, selected: result.droppable2//, extension = result.droppable3\n            const newState = [this.state.selected]\n            newState[source.droppableId] = result[source.droppableId];\n            newState[destination.droppableId] = result[destination.droppableId]\n            this.setState(newState.filter(group => group.length))\n            \n            }\n        }\n    render() {\n        return (\n            <div>\n                <button type = \"button\" onClick ={() => {this.setState([this.state.selected,[]]);}} >add new group</button>\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <div class = \"droppable\">\n                <Droppable droppableId=\"droppable\" direction = \"horizontal\">\n                    {(provided, snapshot) => (\n                        <div \n                            ref={provided.innerRef}\n                            \n                            style={getListStyle(snapshot.isDraggingOver)}>\n                                <p>tree</p>\n                                <div class = \"item\">\n                            {this.state.items.map((item, index) => (\n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}>\n                                    {(provided, snapshot) => (\n                                        <div \n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            \n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            </div>\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n                </div>\n                <div className = \"droppable2\">\n                <Droppable droppableId=\"droppable2\">\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            \n                            style={getListStyle(snapshot.isDraggingOver)}>\n                                <p>garden</p>\n                                <div className = \"item\">\n                            {this.state.selected.map((item, index) => (\n            \n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            \n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            </div>\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n                </div>\n                <div className = \"div2\">\n                {/* <Droppable droppableId=\"droppable3\">\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            style={getListStyle(snapshot.isDraggingOver)}>\n                            {this.state.extension.map((item, index) => (\n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable> */}\n                </div>\n            </DragDropContext>\n            </div>\n        );\n    }\n}\n\n\nexport default test;\n","/Users/sojeong/madCamp_week3/src/route/Dialog.js",["160","161"],"/Users/sojeong/madCamp_week3/src/Sign/SignUpContainer.js",["162"],"import React, { Component } from \"react\";\nimport SignUpForm from \"./SignUpForm.js\";\nconst axios = require(\"axios\");\nconst FormValidators = require(\"./validate\");\nconst validateSignUpForm = FormValidators.validateSignUpForm;\nconst zxcvbn = require(\"zxcvbn\");\n\n\nclass SignUpContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      errors: {},\n      user: {\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        pwconfirm: \"\"\n      },\n      btnTxt: \"show\",\n      type: \"password\",\n      score: \"0\"\n    };\n\n    this.pwMask = this.pwMask.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.submitSignup = this.submitSignup.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.pwHandleChange = this.pwHandleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const field = event.target.name;\n    const user = this.state.user;\n    user[field] = event.target.value;\n\n    this.setState({\n      user\n    });\n  }\n\n  pwHandleChange(event) {\n    const field = event.target.name;\n    const user = this.state.user;\n    user[field] = event.target.value;\n\n    this.setState({\n      user\n    });\n\n    if (event.target.value === \"\") {\n      this.setState((state) =>\n        Object.assign({}, state, {\n          score: \"null\"\n        })\n      );\n    } else {\n      var pw = zxcvbn(event.target.value);\n      this.setState((state) =>\n        Object.assign({}, state, {\n          score: pw.score + 1\n        })\n      );\n    }\n  }\n\n  submitSignup(user) {\n    var params = { username: user.usr, password: user.pw, email: user.email };\n    axios\n      .post(\"https://ouramazingserver.com/api/signup/submit\", params)\n      .then((res) => {\n        if (res.data.success === true) {\n          localStorage.token = res.data.token;\n          localStorage.isAuthenticated = true;\n          window.location.reload();\n        } else {\n          this.setState({\n            errors: { message: res.data.message }\n          });\n        }\n      })\n      .catch((err) => {\n        console.log(\"Sign up data submit error: \", err);\n      });\n  }\n\n  validateForm(event) {\n    event.preventDefault();\n    var payload = validateSignUpForm(this.state.user);\n    if (payload.success) {\n      this.setState({\n        errors: {}\n      });\n      var user = {\n        usr: this.state.user.username,\n        pw: this.state.user.password,\n        email: this.state.user.email\n      };\n      this.submitSignup(user);\n    }\n     else {\n      const errors = payload.errors;\n      this.setState({\n        errors\n      });\n    }\n  }\n\n  pwMask(event) {\n    event.preventDefault();\n    this.setState((state) =>\n      Object.assign({}, state, {\n        type: this.state.type === \"password\" ? \"input\" : \"password\",\n        btnTxt: this.state.btnTxt === \"show\" ? \"hide\" : \"show\"\n      })\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <SignUpForm onSubmit={this.validateForm} onChange={this.handleChange} onPwChange={this.pwHandleChange} e\n        rrors={this.state.errors} user={this.state.user} score={this.state.score} btnTxt={this.state.btnTxt} type={this.state.type} pwMask={this.pwMask}/>\n      </div>\n    );\n  }\n}\n\nexport default SignUpContainer;\n\n// module.exports = SignUpContainer;\n\n\n","/Users/sojeong/madCamp_week3/src/SidebarData.js",["163","164","165","166"],"import React from 'react';\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport * as IoIcons from 'react-icons/io';\n\nexport const SidebarData = [\n  {\n    title: 'Home',\n    path: '/',\n    // icon: <AiIcons.AiFillHome />,\n    icon: \"🏡\",\n    cName: 'nav-text'\n  },\n  {\n    title: 'Profile',\n    path: '/profile',\n    // icon: <IoIcons.IoIosPaper />,\n    icon: \"👩‍🌾\",\n    cName: 'nav-text'\n  },\n  {\n    title: 'My Garden',\n    path: '/mygarden',\n    // icon: <FaIcons.FaCartPlus />,\n    icon: \"🌱\",\n    cName: 'nav-text'\n  }\n];","/Users/sojeong/madCamp_week3/src/Sign/SignUpForm.js",[],"/Users/sojeong/madCamp_week3/src/Sign/validate.js",[],"/Users/sojeong/madCamp_week3/src/Sign/PasswordStr.js",[],"/Users/sojeong/madCamp_week3/src/Column.jsx",[],"/Users/sojeong/madCamp_week3/src/initial-data.js",[],"/Users/sojeong/madCamp_week3/src/route/DoneDialog.js",[],"/Users/sojeong/madCamp_week3/src/route/Timer.js",[],["167","168"],"/Users/sojeong/madCamp_week3/src/route/SetTimer.js",["169","170","171"],"import { ImageExposureZero } from 'material-ui/svg-icons';\nimport React, { Component } from 'react';\nimport '../style/SetTimer.css';\nimport Home from \"./Home\";\n\nclass SetTimer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hours: 0,\n      minutes: 0,\n      seconds:0,\n      killCout:0\n    }\n    this.hoursInput = React.createRef();\n    this.minutesInput= React.createRef();\n    this.secondsInput = React.createRef();\n  }\n\n  inputHandler = (e) => {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  convertToSeconds = ( hours, minutes, seconds) => {\n    return seconds + minutes * 60 + hours * 60 * 60;\n  }\n\n  startTimer = () => {\n    this.timer = setInterval(this.countDown, 1000);\n    // 인풋에 적은 숫자 지우기\n    const hoursInput = document.querySelector(\"input[name=hours]\");\n    const minutesInput = document.querySelector(\"input[name=minutes]\");\n    const secondsInput = document.querySelector(\"input[name=seconds]\");\n    hoursInput.value=\"\";\n    minutesInput.value=\"\";\n    secondsInput.value=\"\";\n  }\n\n\n  countDown = () => {\n    const  { hours, minutes, seconds } = this.state;\n    let c_seconds = this.convertToSeconds(hours, minutes, seconds);\n    if (!this.props.toDoIsNotEmpty && !this.props.InProgressIsNotEmpty){ // 우선 할일을 다 하게 되면\n      this.stopTimer();\n    } else { // 할일 다 안했으면\n      if ( hours === 0 &&  minutes === 0 & seconds === 0){ // time over\n        this.state.killCout +=1;\n        console.log(this.state.killCout);\n        alert(`시간 내에 할일을 다 못하셨군요... 꽃이 죽었어요ㅠㅠ`)\n      }\n      const LS_KEY_KILL_PLANT = \"kill_plant\"\n      localStorage.setItem(LS_KEY_KILL_PLANT, this.state.killCout);\n    }\n    \n    if(c_seconds) {\n\n      // seconds change\n      seconds ? this.setState({seconds: seconds-1}) : this.setState({seconds: 59});\n\n      // minutes change\n      if(c_seconds % 60 === 0 && minutes) {\n        this.setState({minutes: minutes -1});\n      }\n\n      // when only hours entered\n      if(!minutes && hours) {\n        this.setState({minutes: 59});\n      }\n\n      // hours change\n      if(c_seconds % 3600 === 0 && hours) {\n        this.setState({hours: hours-1});\n      }\n\n    } else {\n      clearInterval(this.timer);\n    } \n  }\n\n  stopTimer = () => {\n    clearInterval(this.timer);\n    const hoursInput = document.querySelector(\"input[name=hours]\");\n    const minutesInput = document.querySelector(\"input[name=minutes]\");\n    const secondsInput = document.querySelector(\"input[name=seconds]\");\n    hoursInput.value=\"\";\n    minutesInput.value=\"\";\n    secondsInput.value=\"\";\n  }\n\n  resetTimer = () => {\n    this.setState({\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    });\n    this.hoursInput.current.value = \"\";\n    this.minutesInput.current.value = \"\";\n    this.secondsInput.current.value = \"\";\n  }\n\n\n  render() {\n    const { hours, minutes, seconds } = this.state;\n\n    return (\n      <div className=\"SetTimer\">\n        <h1>TIMER</h1>\n\n        <div>\n          <input ref={this.hoursInput} type=\"number\" className=\"form-control input-lg\" placeholder={\"시를 입력하세요\"} name=\"hours\" onChange={this.inputHandler} />\n          <input ref={this.minutesInput} type=\"number\" className=\"form-control input-lg\" placeholder={\"분을 입력하세요\"} name=\"minutes\" onChange={this.inputHandler} />\n          <input ref={this.secondsInput} type=\"number\" className=\"form-control input-lg\" placeholder={\"초를 입력하세요\"} name=\"seconds\" onChange={this.inputHandler} />\n        </div>\n        \n         <div>\n            <button onClick={this.startTimer} className=\"startBtn\">START</button>\n            <button onClick={this.stopTimer}  className=\"stopBtn\">STOP</button>\n            <button onClick={this.resetTimer}  className=\"resetBtn\">RESET</button>\n         </div>\n\n         <h3 className=\"timer-settimer\">남은 시간</h3>\n         <h2>{hours<10? `0${hours}` : hours} : {minutes<10? `0${minutes}` : minutes} : {seconds<10? `0${seconds}` : seconds}</h2>\n      </div>\n\n    );\n  }\n}\n\nexport default SetTimer;","/Users/sojeong/madCamp_week3/src/Task.jsx",[],{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","severity":1,"message":"177","line":6,"column":8,"nodeType":"178","messageId":"179","endLine":6,"endColumn":15},{"ruleId":"176","severity":1,"message":"180","line":10,"column":8,"nodeType":"178","messageId":"179","endLine":10,"endColumn":13},{"ruleId":"176","severity":1,"message":"181","line":11,"column":8,"nodeType":"178","messageId":"179","endLine":11,"endColumn":12},{"ruleId":"176","severity":1,"message":"182","line":1,"column":16,"nodeType":"178","messageId":"179","endLine":1,"endColumn":20},{"ruleId":"176","severity":1,"message":"183","line":2,"column":9,"nodeType":"178","messageId":"179","endLine":2,"endColumn":12},{"ruleId":"176","severity":1,"message":"184","line":2,"column":14,"nodeType":"178","messageId":"179","endLine":2,"endColumn":17},{"ruleId":"176","severity":1,"message":"185","line":2,"column":19,"nodeType":"178","messageId":"179","endLine":2,"endColumn":28},{"ruleId":"186","severity":1,"message":"187","line":20,"column":4,"nodeType":"188","endLine":20,"endColumn":28},{"ruleId":"189","severity":1,"message":"190","line":11,"column":14,"nodeType":"191","messageId":"192","endLine":11,"endColumn":30,"fix":"193"},{"ruleId":"176","severity":1,"message":"181","line":3,"column":8,"nodeType":"178","messageId":"179","endLine":3,"endColumn":12},{"ruleId":"176","severity":1,"message":"194","line":4,"column":8,"nodeType":"178","messageId":"179","endLine":4,"endColumn":16},{"ruleId":"176","severity":1,"message":"195","line":5,"column":8,"nodeType":"178","messageId":"179","endLine":5,"endColumn":12},{"ruleId":"176","severity":1,"message":"196","line":6,"column":8,"nodeType":"178","messageId":"179","endLine":6,"endColumn":12},{"ruleId":"176","severity":1,"message":"197","line":7,"column":8,"nodeType":"178","messageId":"179","endLine":7,"endColumn":14},{"ruleId":"176","severity":1,"message":"198","line":8,"column":8,"nodeType":"178","messageId":"179","endLine":8,"endColumn":13},{"ruleId":"176","severity":1,"message":"199","line":9,"column":10,"nodeType":"178","messageId":"179","endLine":9,"endColumn":16},{"ruleId":"176","severity":1,"message":"200","line":11,"column":8,"nodeType":"178","messageId":"179","endLine":11,"endColumn":14},{"ruleId":"176","severity":1,"message":"201","line":1,"column":16,"nodeType":"178","messageId":"179","endLine":1,"endColumn":25},{"ruleId":"176","severity":1,"message":"202","line":2,"column":8,"nodeType":"178","messageId":"179","endLine":2,"endColumn":16},{"ruleId":"176","severity":1,"message":"203","line":3,"column":8,"nodeType":"178","messageId":"179","endLine":3,"endColumn":13},{"ruleId":"176","severity":1,"message":"204","line":4,"column":8,"nodeType":"178","messageId":"179","endLine":4,"endColumn":13},{"ruleId":"176","severity":1,"message":"199","line":5,"column":10,"nodeType":"178","messageId":"179","endLine":5,"endColumn":16},{"ruleId":"176","severity":1,"message":"205","line":1,"column":17,"nodeType":"178","messageId":"179","endLine":1,"endColumn":25},{"ruleId":"176","severity":1,"message":"206","line":8,"column":8,"nodeType":"178","messageId":"179","endLine":8,"endColumn":14},{"ruleId":"176","severity":1,"message":"207","line":10,"column":8,"nodeType":"178","messageId":"179","endLine":10,"endColumn":12},{"ruleId":"176","severity":1,"message":"208","line":11,"column":10,"nodeType":"178","messageId":"179","endLine":11,"endColumn":35},{"ruleId":"176","severity":1,"message":"209","line":54,"column":13,"nodeType":"178","messageId":"179","endLine":54,"endColumn":17},{"ruleId":"210","severity":1,"message":"211","line":55,"column":7,"nodeType":"191","endLine":55,"endColumn":36},{"ruleId":"186","severity":1,"message":"187","line":210,"column":11,"nodeType":"188","endLine":210,"endColumn":70},{"ruleId":"176","severity":1,"message":"205","line":1,"column":16,"nodeType":"178","messageId":"179","endLine":1,"endColumn":24},{"ruleId":"186","severity":1,"message":"187","line":6,"column":9,"nodeType":"188","endLine":6,"endColumn":48},{"ruleId":"212","severity":1,"message":"213","line":71,"column":9,"nodeType":"214","messageId":"215","endLine":71,"endColumn":101},{"ruleId":"176","severity":1,"message":"202","line":2,"column":8,"nodeType":"178","messageId":"179","endLine":2,"endColumn":16},{"ruleId":"189","severity":1,"message":"190","line":12,"column":14,"nodeType":"191","messageId":"192","endLine":12,"endColumn":30,"fix":"216"},{"ruleId":"176","severity":1,"message":"201","line":1,"column":17,"nodeType":"178","messageId":"179","endLine":1,"endColumn":26},{"ruleId":"189","severity":1,"message":"190","line":31,"column":18,"nodeType":"191","messageId":"192","endLine":31,"endColumn":34,"fix":"217"},{"ruleId":"189","severity":1,"message":"190","line":37,"column":18,"nodeType":"191","messageId":"192","endLine":37,"endColumn":36,"fix":"218"},{"ruleId":"219","severity":1,"message":"220","line":65,"column":31,"nodeType":"221","messageId":"222","endLine":65,"endColumn":33},{"ruleId":"176","severity":1,"message":"223","line":68,"column":13,"nodeType":"178","messageId":"179","endLine":68,"endColumn":28},{"ruleId":"176","severity":1,"message":"201","line":1,"column":17,"nodeType":"178","messageId":"179","endLine":1,"endColumn":26},{"ruleId":"176","severity":1,"message":"224","line":1,"column":8,"nodeType":"178","messageId":"179","endLine":1,"endColumn":13},{"ruleId":"176","severity":1,"message":"225","line":2,"column":13,"nodeType":"178","messageId":"179","endLine":2,"endColumn":20},{"ruleId":"176","severity":1,"message":"226","line":3,"column":13,"nodeType":"178","messageId":"179","endLine":3,"endColumn":20},{"ruleId":"176","severity":1,"message":"227","line":4,"column":13,"nodeType":"178","messageId":"179","endLine":4,"endColumn":20},{"ruleId":"172","replacedBy":"228"},{"ruleId":"174","replacedBy":"229"},{"ruleId":"176","severity":1,"message":"230","line":1,"column":10,"nodeType":"178","messageId":"179","endLine":1,"endColumn":27},{"ruleId":"176","severity":1,"message":"231","line":4,"column":8,"nodeType":"178","messageId":"179","endLine":4,"endColumn":12},{"ruleId":"210","severity":1,"message":"211","line":47,"column":9,"nodeType":"191","endLine":47,"endColumn":19},"no-native-reassign",["232"],"no-negated-in-lhs",["233"],"no-unused-vars","'Profile' is defined but never used.","Identifier","unusedVar","'Timer' is defined but never used.","'Grid' is defined but never used.","'Text' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Container' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-whitespace-before-property","Unexpected whitespace before property k+ offset.","MemberExpression","unexpectedWhitespace",{"range":"234","text":"235"},"'TreeList' is defined but never used.","'Test' is defined but never used.","'Tree' is defined but never used.","'Ground' is defined but never used.","'grass' is defined but never used.","'Button' is defined but never used.","'MyTree' is defined but never used.","'Component' is defined but never used.","'ReactDOM' is defined but never used.","'Popup' is defined but never used.","'Modal' is defined but never used.","'useState' is defined but never used.","'Dialog' is defined but never used.","'Fade' is defined but never used.","'CommunicationSpeakerPhone' is defined but never used.","'item' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock",{"range":"236","text":"235"},{"range":"237","text":"235"},{"range":"238","text":"235"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'all_plant_count' is assigned a value but never used.","'React' is defined but never used.","'FaIcons' is defined but never used.","'AiIcons' is defined but never used.","'IoIcons' is defined but never used.",["232"],["233"],"'ImageExposureZero' is defined but never used.","'Home' is defined but never used.","no-global-assign","no-unsafe-negation",[477,478],"",[435,436],[1043,1044],[1221,1222]]