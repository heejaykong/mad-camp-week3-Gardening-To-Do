[{"/Users/sojeong/madCamp_week3/src/index.js":"1","/Users/sojeong/madCamp_week3/src/App.js":"2","/Users/sojeong/madCamp_week3/src/Navbar.js":"3","/Users/sojeong/madCamp_week3/src/route/TreeColumn.js":"4","/Users/sojeong/madCamp_week3/src/route/Login.js":"5","/Users/sojeong/madCamp_week3/src/route/Profile.js":"6","/Users/sojeong/madCamp_week3/src/Sign/SignUp.js":"7","/Users/sojeong/madCamp_week3/src/route/Grid.js":"8","/Users/sojeong/madCamp_week3/src/route/MyProfile.js":"9","/Users/sojeong/madCamp_week3/src/route/MyGarden.js":"10","/Users/sojeong/madCamp_week3/src/route/Home.js":"11","/Users/sojeong/madCamp_week3/src/Column.jsx":"12","/Users/sojeong/madCamp_week3/src/SidebarData.js":"13","/Users/sojeong/madCamp_week3/src/Sign/SignUpContainer.js":"14","/Users/sojeong/madCamp_week3/src/route/Tree.js":"15","/Users/sojeong/madCamp_week3/src/route/TreeList.js":"16","/Users/sojeong/madCamp_week3/src/route/Test.js":"17","/Users/sojeong/madCamp_week3/src/route/MyTree.js":"18","/Users/sojeong/madCamp_week3/src/route/Dialog.js":"19","/Users/sojeong/madCamp_week3/src/route/DoneDialog.js":"20","/Users/sojeong/madCamp_week3/src/initial-data.js":"21","/Users/sojeong/madCamp_week3/src/route/Timer.js":"22","/Users/sojeong/madCamp_week3/src/Task.jsx":"23","/Users/sojeong/madCamp_week3/src/route/SetTimer.js":"24","/Users/sojeong/madCamp_week3/src/Sign/SignUpForm.js":"25","/Users/sojeong/madCamp_week3/src/Sign/validate.js":"26","/Users/sojeong/madCamp_week3/src/Sign/PasswordStr.js":"27"},{"size":179,"mtime":1611031437205,"results":"28","hashOfConfig":"29"},{"size":895,"mtime":1611059347104,"results":"30","hashOfConfig":"29"},{"size":1502,"mtime":1611031437203,"results":"31","hashOfConfig":"29"},{"size":1473,"mtime":1611031437209,"results":"32","hashOfConfig":"29"},{"size":3088,"mtime":1611060596606,"results":"33","hashOfConfig":"29"},{"size":741,"mtime":1611031437208,"results":"34","hashOfConfig":"29"},{"size":610,"mtime":1611031437204,"results":"35","hashOfConfig":"29"},{"size":4184,"mtime":1611031437207,"results":"36","hashOfConfig":"29"},{"size":4866,"mtime":1611062212863,"results":"37","hashOfConfig":"29"},{"size":1754,"mtime":1611047022710,"results":"38","hashOfConfig":"29"},{"size":7360,"mtime":1611058941714,"results":"39","hashOfConfig":"29"},{"size":2328,"mtime":1611043407637,"results":"40","hashOfConfig":"29"},{"size":577,"mtime":1611031437203,"results":"41","hashOfConfig":"29"},{"size":3252,"mtime":1611043407638,"results":"42","hashOfConfig":"29"},{"size":90,"mtime":1611031437209,"results":"43","hashOfConfig":"29"},{"size":5105,"mtime":1611031437209,"results":"44","hashOfConfig":"29"},{"size":10321,"mtime":1611031437208,"results":"45","hashOfConfig":"29"},{"size":1100,"mtime":1611037220322,"results":"46","hashOfConfig":"29"},{"size":2643,"mtime":1611059860931,"results":"47","hashOfConfig":"29"},{"size":1881,"mtime":1611031437206,"results":"48","hashOfConfig":"29"},{"size":1085,"mtime":1611043407639,"results":"49","hashOfConfig":"29"},{"size":2749,"mtime":1611040112237,"results":"50","hashOfConfig":"29"},{"size":3294,"mtime":1611055693914,"results":"51","hashOfConfig":"29"},{"size":3266,"mtime":1611054108349,"results":"52","hashOfConfig":"29"},{"size":1997,"mtime":1611059273352,"results":"53","hashOfConfig":"29"},{"size":2054,"mtime":1611031437205,"results":"54","hashOfConfig":"29"},{"size":798,"mtime":1611031437204,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"16g871s",{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"75","usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"96","usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"99","usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"/Users/sojeong/madCamp_week3/src/index.js",[],["121","122"],"/Users/sojeong/madCamp_week3/src/App.js",["123","124","125"],"/Users/sojeong/madCamp_week3/src/Navbar.js",[],"/Users/sojeong/madCamp_week3/src/route/TreeColumn.js",[],"/Users/sojeong/madCamp_week3/src/route/Login.js",[],"/Users/sojeong/madCamp_week3/src/route/Profile.js",["126","127","128","129","130"],"import React, {Text} from \"react\";\nimport {Row, Col, Container} from \"react-bootstrap\"\nimport img_woman from '../Image/woman.png';\n// import \"../style/Profile.css\"\nimport '../style/MyProfile.css';\nclass Profile extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t  nickname: \"sojeong\",\n\t\t  password:\"1234\",\n\t\t  lifeCount:\"10\",\n\t\t  killCount:\"2\"\n\t\t  }  \n\t\t};\n\trender(){\n\treturn (\n\t\t<div className='Profile'>\n\t\t\t{/* <motion.div animate = {{scale:0.5}}/> */}\n\t\t\t<img src = {img_woman}/>\n\t\t\t<p>name : {this.state.nickname}</p>\n\t\t\t<p>PassWord : {this.state.password}</p>\n\t\t\t<p>plant count : {this.state.lifeCount}</p>\n\t\t\t<p>dead plant count : {this.state.killCount}</p>\n\n\t\t</div>\n\n\t);\n\t}\n}\n\n\nexport default Profile;","/Users/sojeong/madCamp_week3/src/Sign/SignUp.js",["131","132","133","134","135"],"import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport Popup from 'reactjs-popup'\nimport Modal from 'react-modal'\nimport { Button } from 'reactstrap';\nimport SignUpContainer from \"./SignUpContainer\";\nimport MuiThemeProvider from \"material-ui/styles/MuiThemeProvider\";\n\nclass SignUp extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {name: \"hello\"};\n    }\n\n    render(){\n    return (\n        <MuiThemeProvider>\n            {this.props.children}\n            <SignUpContainer/>\n        </MuiThemeProvider>\n    );\n    }\n}\n\nexport default SignUp;","/Users/sojeong/madCamp_week3/src/route/Grid.js",["136"],"import React, { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"../style/grid.css\"\nconst tree = [\"🍋\", \"🍊\", \"🍈\", \"👩‍🦰\", \"👨‍🦱\", \"👱‍♀️\", \"👨\", \"🧒\", \"👩‍🦳\", \"👸\"];\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    //id: tree [k+ offset],//-new Date().getTime(),\n    id:  `item-${k + offset}-${new Date().getTime()}`,\n    content: tree [k+ offset] \n    //content: `item ${k + offset}`\n  }));\n\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250\n});\n\nfunction Grid (){\n  const [state, setState] = useState([getItems(3)])\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     items: getItems(10)\n  //   };\n  //   this.onDragEnd = this.onDragEnd.bind(this);\n  // }\nfunction onDragEnd(result) {\n    const { source, destination } = result;\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    const sInd = +source.droppableId;\n    const dInd = +destination.droppableId;\n    if (sInd === dInd) {\n      const items = reorder(state[sInd], source.index, destination.index);\n      const newState = [...state];\n      newState[sInd] = items;\n      setState(newState);\n    } else {\n      const result = move(state[sInd], state[dInd], source, destination);\n      const newState = [...state];\n      newState[sInd] = result[sInd];\n      newState[dInd] = result[dInd];\n\n      setState(newState.filter(group => group.length));\n    }\n    // const items = reorder(\n    //   this.state.items,\n    //   result.source.index,\n    //   result.destination.index\n    // );\n\n    // this.setState({\n    //   items\n    // });\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n\n    return (\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"droppable\">\n          {(provided, snapshot) => (\n            <div className = \"grid\"\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n            >\n              {this.state.items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  \n}\n\nexport default Grid;\n","/Users/sojeong/madCamp_week3/src/route/MyProfile.js",["137"],"/Users/sojeong/madCamp_week3/src/route/MyGarden.js",["138","139","140","141","142","143","144","145"],"import React from \"react\";\n// import { MDBContainer, MDBRow, MDBCol } from 'mdbreact';\n// import {Container, Col, Row, Button} from 'react-bootstrap';\nimport '../style/MyGarden.css'\nimport Grid from \"./Grid\"\nimport TreeList from \"./TreeList\"\nimport Test from \"./Test\"\nimport Tree from \"./Tree\"\nimport Ground from '../Image/ground1.png';\nimport grass from '../Image/grass1.png';\nimport { Button } from \"react-bootstrap\";\nimport Dialog from \"./Dialog\";\nimport MyTree from \"./MyTree\"\n\nclass MyGarden extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showDialog: true,\n            itemFriends: [\"🌿\",\"🌳\", \"🌵\", \"🎄\", \"🌲\",\"🌴\", \"🪵\", \"🍀\", \"🌱\",\"🎍\",\"🍃\",\"💐\",\"🌷\", \"🌸\", \"🌺\", \"🥀\",\"🌹\", \"🌼\", \"🌻\",\"🌞\"]\n        \n\n        }\n    }\n    _showDialog() {\n        this.setState({showDialog: this.state.showDialog});\n    }\n\t_showItem() {\n        this.setState({item: this.state.itemFriends});\n    }\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='MyGarden'>\n                \n                {/* <img src = {Ground} className=\"img-garden\"/> */}\n                <div className=\"img-garden\"/>\n\t\t\t\t{/* {this._showDialog.bind(this)} */}\n                {/* {this._showItem.bind(this)} */}\n                <Dialog />\n                {/* <Button className='button' onClick={this._showDialog.bind(this)}> Show item </Button> */}\n                {/* <Dialog  show={this.state.showDialog} item = {this.state.item1}/> */}\n                {/* <Dialog  show={this.state.showDialog} item = {this.state.item2}/> */}\n                {/* <Dialog  show={this.state.showDialog} item = {this.state.item4}/>  */}\n           \n         \n\t\t\t </div>\n\n\t\t);\n\t}\n} \nexport default MyGarden;\n    \n\n\n","/Users/sojeong/madCamp_week3/src/route/Home.js",["146","147","148","149","150","151","152","153"],"import React, { useState } from \"react\";\nimport styled from 'styled-components';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport initialData from \"../initial-data\";\nimport Column from '../Column.jsx';\nimport '../style/Home.css';\nimport Dialog from \"./DoneDialog\";\nimport Timer from \"./Timer\";\nimport SetTimer from \"./SetTimer\";\nimport Fade from '@material-ui/core/Fade'\nimport { CommunicationSpeakerPhone } from \"material-ui/svg-icons\";\n\n// Styles\nconst Container = styled.div`\n  display: flex;\n`;\n\n// let flowers = [];\nclass Home extends React.Component {\n\n  state = initialData; //initialData는 지금은 따로 파일에서 하드코딩한 상태. 이제 DB에서 어케 부를지 방법을 찾아보자.\n  \n  \n  // 드래그가 시작되면\n  onDragStart = (startColumn, provided) => {\n    document.body.style.transition = 'background-color 0.2s ease';\n  }\n  // 드래그를 해서 상황이 업데이트되면\n  onDragUpdate = update => {\n    const { destination } = update;\n    const opacity = destination ?\n      destination.index / Object.keys(this.state.tasks).length\n      : 0;\n    document.body.style.backgroundColor = `rgba(153,  141, 217, ${opacity})`;\n  }\n  //딱 드롭했을 때가 되면\n  onDragEnd = result => {\n    document.body.style.color = 'inherit';\n    document.body.style.backgroundColor = 'inherit';\n    const { destination, source, draggableId, type } = result;\n\n    // Task가 옮겨졌을 때 처리하기\n    if (!destination) { // 1. 아예 이상한 바깥 곳에 놓았을 경우\n      return;\n    }\n    if ( // 2. 이전 위치와 같은 곳에 놓았을 경우\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    // 3. Task가 Done 칼럼으로 옮겨졌을 경우\n    if (destination.droppableId === 'column-3') {\n\n      const item = \"🌞\";\n      this.state.tasks[draggableId].isDone = true; // 해당 Task를 disableDraggable 한다\n      //showItem(item);\n    }\n    // showItem(item)=() =>{\n    //   <div>\n    //   <Fade in={true} timeout={4000}>\n    //     <p>True Component</p>\n    //   </Fade>\n\n    //   <Fade in={false} timeout={4000}>\n    //     <p>False Component</p>\n    //   </Fade>\n    //   </div>\n    //   // return <Fade className=\"fade-in\" timeout = {2000}> itemcreate {console.log(\"fade in\")} </Fade>\n    // }\n\n\n    // 여기서 잠깐... Column 자체가 옮겨졌을 때 처리하기\n    if (type === 'column') {\n      const newColumnOrder = Array.from(this.state.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n\n      const newState = {\n        ...this.state,\n        columnOrder: newColumnOrder\n      };\n      this.setState(newState);\n      return;\n    }\n\n    const startColumn = this.state.columns[source.droppableId];\n    const finishColumn = this.state.columns[destination.droppableId];\n    \n    // 4. persist reordering of task that has been moved within a list\n    // 4. Task가 Column 내에서 옮겨졌을 때 그 옮겨진 자리가 유지되도록 처리하기\n    if (startColumn === finishColumn) {\n      const newTaskIds = Array.from(startColumn.taskIds);\n      newTaskIds.splice(source.index, 1); // 우선 옮겨짐 당한 Task를 원래 자리에서 없애고\n      newTaskIds.splice(destination.index, 0, draggableId); // 옮긴 후의 그 자리에 끼워넣는다\n\n      const newColumn = { // Column 내 Task들 갱신\n        ...startColumn,\n        taskIds: newTaskIds\n      };\n      const newState = { // Column 갱신\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n\n      this.setState(newState);\n      return;\n    }\n\n    // 5. persist reordering of task that has been moved from one list to another\n    // 5. Task가 Column 너머 옮겨졌을 때 그 옮겨진 자리가 유지되도록 처리하기\n    const startTaskIds = Array.from(startColumn.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...startColumn,\n      taskIds: startTaskIds\n    };\n    const finishTaskIds = Array.from(finishColumn.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n    const newFinish = {\n      ...finishColumn,\n      taskIds: finishTaskIds\n    };\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      },\n    }\n    this.setState(newState)\n    \n    console.log(\"Todo is \"+newState.columns[\"column-1\"].taskIds);\n    console.log(\"In Progress is \"+newState.columns[\"column-2\"].taskIds);\n    \n    // 6. Task가 Column 너머 옮겨졌을 때, 이제 더이상 To-do, In Progress Column에 아무 것도 없을 경우(즉 전부 Done칼럼으로 옮겨졌을 경우)\n    const toDoIsNotEmpty = newState.columns[\"column-1\"].taskIds.length;\n    const InProgressIsNotEmpty = newState.columns[\"column-2\"].taskIds.length;\n    const FLOWERS = [\"🌹\",\"🌺\",\"🌻\",\"🌼\",\"🌷\",\"🍀\",\"🌵\"];\n    const FLOWER_COUNT = 7;\n    const LS_KEY_FLOWERS = \"flowers\";\n\n    if (!toDoIsNotEmpty && !InProgressIsNotEmpty) {\n      const randomIndex = Math.floor(Math.random() * FLOWER_COUNT);\n      const theFlower = FLOWERS[randomIndex];\n      alert(`Congratulations!\\nYou've got your Flower:\\n${theFlower}`);\n\n      let currentFlowersString = getFlower();\n      if (!currentFlowersString){ // local에 아무것도 없음\n        currentFlowersString = theFlower;\n      }\n      else\n      currentFlowersString += (\",\"+theFlower);\n      // console.log(currentFlowersString);\n\n      saveFlower(currentFlowersString);\n    }\n    function getFlower(){\n      return localStorage.getItem(LS_KEY_FLOWERS);\n    }\n    function saveFlower(flowers){\n      \n      localStorage.setItem(LS_KEY_FLOWERS, flowers);\n    }\n\n    // TODO: 그리고 이렇게 reorder된 index값들을 디비에 저장해야 refresh했을 때도 유지될 수 있는데, 어떻게 하지?\n\n  };\n\n  render() {\n    return (\n      <>\n      <div className=\"home\">\n        <SetTimer\n          toDoIsNotEmpty={this.state.columns[\"column-1\"].taskIds.length}\n          InProgressIsNotEmpty={this.state.columns[\"column-2\"].taskIds.length}\n        />\n      </div>\n      <DragDropContext\n      onDragEnd={this.onDragEnd}\n      onDragStart={this.onDragStart}\n      onDragUpdate={this.onDragUpdate}\n      >\n        <Droppable\n          droppableId=\"all-columns\"\n          direction=\"horizontal\"\n          type=\"column\"\n        >\n          {provided => (\n            <Container\n            {...provided.droppableProps}\n            ref={provided.innerRef}\n            >\n              {/* <div className=\"budImageContainer\"> */}\n                <img src=\"https://www.pngrepo.com/png/169302/180/bud.png\"/>\n              {/* </div> */}\n              {this.state.columnOrder.map((columnId, index) => {\n                const column = this.state.columns[columnId];\n                const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n                return <Column key={column.id} column={column} tasks={tasks} index={index} />;\n              })}\n              {provided.placeholder}\n              \n            </Container>\n          )}\n        </Droppable>\n      </DragDropContext>\n      </>\n    );\n  }\n}\n\nexport default Home;\n","/Users/sojeong/madCamp_week3/src/Column.jsx",[],"/Users/sojeong/madCamp_week3/src/SidebarData.js",["154","155","156","157"],"import React from 'react';\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport * as IoIcons from 'react-icons/io';\n\nexport const SidebarData = [\n  {\n    title: 'Home',\n    path: '/',\n    // icon: <AiIcons.AiFillHome />,\n    icon: \"🏡\",\n    cName: 'nav-text'\n  },\n  {\n    title: 'Profile',\n    path: '/profile',\n    // icon: <IoIcons.IoIosPaper />,\n    icon: \"👩‍🌾\",\n    cName: 'nav-text'\n  },\n  {\n    title: 'My Garden',\n    path: '/mygarden',\n    // icon: <FaIcons.FaCartPlus />,\n    icon: \"🌱\",\n    cName: 'nav-text'\n  }\n];","/Users/sojeong/madCamp_week3/src/Sign/SignUpContainer.js",["158"],"import React, { Component } from \"react\";\nimport SignUpForm from \"./SignUpForm.js\";\nconst axios = require(\"axios\");\nconst FormValidators = require(\"./validate\");\nconst validateSignUpForm = FormValidators.validateSignUpForm;\nconst zxcvbn = require(\"zxcvbn\");\n\n\nclass SignUpContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      errors: {},\n      user: {\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        pwconfirm: \"\"\n      },\n      btnTxt: \"show\",\n      type: \"password\",\n      score: \"0\"\n    };\n\n    this.pwMask = this.pwMask.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.submitSignup = this.submitSignup.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.pwHandleChange = this.pwHandleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const field = event.target.name;\n    const user = this.state.user;\n    user[field] = event.target.value;\n\n    this.setState({\n      user\n    });\n  }\n\n  pwHandleChange(event) {\n    const field = event.target.name;\n    const user = this.state.user;\n    user[field] = event.target.value;\n\n    this.setState({\n      user\n    });\n\n    if (event.target.value === \"\") {\n      this.setState((state) =>\n        Object.assign({}, state, {\n          score: \"null\"\n        })\n      );\n    } else {\n      var pw = zxcvbn(event.target.value);\n      this.setState((state) =>\n        Object.assign({}, state, {\n          score: pw.score + 1\n        })\n      );\n    }\n  }\n\n  submitSignup(user) {\n    var params = { username: user.usr, password: user.pw, email: user.email };\n    axios\n      .post(\"https://ouramazingserver.com/api/signup/submit\", params)\n      .then((res) => {\n        if (res.data.success === true) {\n          localStorage.token = res.data.token;\n          localStorage.isAuthenticated = true;\n          window.location.reload();\n        } else {\n          this.setState({\n            errors: { message: res.data.message }\n          });\n        }\n      })\n      .catch((err) => {\n        console.log(\"Sign up data submit error: \", err);\n      });\n  }\n\n  validateForm(event) {\n    event.preventDefault();\n    var payload = validateSignUpForm(this.state.user);\n    if (payload.success) {\n      this.setState({\n        errors: {}\n      });\n      var user = {\n        usr: this.state.user.username,\n        pw: this.state.user.password,\n        email: this.state.user.email\n      };\n      this.submitSignup(user);\n    }\n     else {\n      const errors = payload.errors;\n      this.setState({\n        errors\n      });\n    }\n  }\n\n  pwMask(event) {\n    event.preventDefault();\n    this.setState((state) =>\n      Object.assign({}, state, {\n        type: this.state.type === \"password\" ? \"input\" : \"password\",\n        btnTxt: this.state.btnTxt === \"show\" ? \"hide\" : \"show\"\n      })\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <SignUpForm onSubmit={this.validateForm} onChange={this.handleChange} onPwChange={this.pwHandleChange} e\n        rrors={this.state.errors} user={this.state.user} score={this.state.score} btnTxt={this.state.btnTxt} type={this.state.type} pwMask={this.pwMask}/>\n      </div>\n    );\n  }\n}\n\nexport default SignUpContainer;\n\n// module.exports = SignUpContainer;\n\n\n","/Users/sojeong/madCamp_week3/src/route/Tree.js",[],"/Users/sojeong/madCamp_week3/src/route/TreeList.js",["159","160"],"import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nconst tree = [\"🍋\", \"🍊\", \"🍈\"];\n// fake data generator\nconst getItems = (count, offset = 0) =>\n    \n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    //id: tree [k+ offset],//-new Date().getTime(),\n    id:  `item-${k + offset}-${new Date().getTime()}`,\n    content: tree [k+ offset] \n    //content: `item ${k + offset}`\n  }));\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250\n});\n\nfunction TreeList() {\n  const [state, setState] = useState([getItems(3)])\n  //= useState([getItems(3), getItems(5, 10)]);\n\n  function onDragEnd(result) {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n    const sInd = +source.droppableId;\n    const dInd = +destination.droppableId;\n\n    if (sInd === dInd) {\n      const items = reorder(state[sInd], source.index, destination.index);\n      const newState = [...state];\n      newState[sInd] = items;\n      setState(newState);\n    } else {\n      const result = move(state[sInd], state[dInd], source, destination);\n      const newState = [...state];\n      newState[sInd] = result[sInd];\n      newState[dInd] = result[dInd];\n\n      setState(newState.filter(group => group.length));\n    }\n  }\n\n  return (\n    <div>\n       {/* <button\n        type=\"button\"\n        onClick={() => {\n          setState([...state, []]);\n        }}\n      >\n        Add new group\n      </button> \n      <button\n        type=\"button\"\n        onClick={() => {\n          setState([...state, getItems(1)]);\n        }}\n      >\n        Add new item\n      </button>  */}\n      <div style={{ display: \"flex\" }}>\n        <DragDropContext onDragEnd={onDragEnd}>\n          {state.map((el, ind) => (\n            <Droppable key={ind} droppableId={`${ind}`}>\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                  {...provided.droppableProps}\n                >\n                  {el.map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id}\n                      index={index}\n                    >\n                      {(provided, snapshot) => (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          )}\n                        >\n                          <div\n                            style={{\n                              display: \"flex\",\n                              justifyContent: \"space-around\"\n                            }}\n                          >\n                            {item.content}\n                            {/* <button\n                              type=\"button\"\n                              onClick={() => {\n                                const newState = [...state];\n                                newState[ind].splice(index, 1);\n                                setState(\n                                  newState.filter(group => group.length)\n                                );\n                              }}\n                            >\n                              delete\n                            </button> */}\n                          </div>\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          ))}\n        </DragDropContext>\n      </div>\n    </div>\n  );\n}\n\nexport default TreeList;\n","/Users/sojeong/madCamp_week3/src/route/Test.js",["161","162","163"],"import React, { Component } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport \"../style/Test.css\"\nconst tree = [\"🍋\", \"🍊\", \"🍈\"];\nconst ground = [\"🎅\", \"👩‍🎤\", \"👼\", \"👩‍🦰\",\"👨‍🦱\", \"👱‍♀️\", \"👨\", \"🧒\"]\n// const extension = [\"👨‍🦱\", \"👱‍♀️\", \"👨\", \"🧒\"]\n// [[\"👨‍🦱\", \"👱‍♀️\", \"👨\", \"🧒\"],\n//  [\"👩‍🦳\", \"👸\", \"🙂\",\"😠\"],\n//  [\"😔\",\"😖\",\"🙁\",\"🤬\"],\n//  [\"🥶\", \"😦\",\"🤢\", \"😈\"]];\n\n// // fake data generator\n// const getItems = (count, offset = 0) =>\n//     Array.from({ length: count }, (v, k) => k).map(k => ({\n//         id: `item-${k + offset}`,\n//         content: `item ${k + offset}`\n//     }));\n// const groundList =(count, offset =0)=> \n// const array\n// (tree.map((items, index) => {\n//     {items.map((subItem, sIndex) =>{\n//         id: `item==${sIndex + offset}`,\n//         content: tree [sIndex + offset] \n//     })}\n// }))\n\n\nconst treeList = (count, offset = 0) =>\n    Array.from({length: count},(v, k) => k).map(k => ({\n        id: `item==${k + offset}`,\n        content: tree [k+ offset] \n    }))\n\nconst groundList = (count, offset = 0) =>\n    Array.from({length: count},(v, k) => k).map(k => ({\n        id: `ite==${k + offset}`,\n        content: ground [k+ offset] \n    }))\n\n// const extensionList = (count, offset = 0) =>\n// Array.from({length: count},(v, k) => k).map(k => ({\n//     id: `ite==${k + offset}`,\n//     content: extension [k+ offset] \n// }))\n\n\n// a little function to help us with reordering the result\n// const reorder = (list, startIndex, endIndex) => {\n//     const result = Array.from(list);\n//     const [removed] = result.splice(startIndex, 1);\n//     result.splice(endIndex, 0, removed);\n\n//     return result;\n// };\n\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n    //source 움직인 쪽의 리스트, destClone 목적지 쪽의 리스트\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    console.log(sourceClone)\n    console.log(destClone)\n\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    //옮겨진 아이템 [removed]\n    console.log([removed])\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n};\n\nconst grid = 20;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid ,\n    margin: `${grid}px ${grid}px ${grid}px ${grid}px`,\n\n    // change background colour if dragging\n    background: isDragging ? 'grey' : 'grey',\n\n    // styles we need to apply on draggables\n    ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n    background: isDraggingOver ? 'lightgrey' : 'lightgrey',\n    padding: grid,\n    width: 250\n});\n\nclass test extends React.Component {\n    state = {\n        items: treeList(3),\n        //selected: extension[4][4]\n        selected: groundList(8),\n        //extension: extensionList(4)\n    };\n\n    id2List = {\n        droppable: 'items',\n        droppable2: 'selected',\n        //droppable3: 'extension'\n\n    };\n\n    getList = id => this.state[this.id2List[id]];\n  \n    onDragEnd = result => {\n        const { source, destination } = result;\n        // dropped outside the list\n        if (!destination) {\n            return;\n        }\n        //자기 자신으로 움직이는 경우 \n        if (source.droppableId === destination.droppableId) {\n            const items = reorder(this.getList(source.droppableId),source.index,destination.index);\n            let state = { items };\n            const newState = [state]\n            newState[source.droppableId] = items;\n            this.setState(newState)\n            \n            //this.setState(state);\n            // //모르겠음\n            // if (source.droppableId === 'droppable2') {\n            //     state = { selected: items };\n            // }\n\n        } else {\n            //움직인 상태 결과 값 \n            const result = move(this.getList(source.droppableId),this.getList(destination.droppableId),source,destination);\n            //this.setState({items: result.droppable, selected: result.droppable2//, extension = result.droppable3\n            const newState = [this.state.selected]\n            newState[source.droppableId] = result[source.droppableId];\n            newState[destination.droppableId] = result[destination.droppableId]\n            this.setState(newState.filter(group => group.length))\n            \n            }\n        }\n    render() {\n        return (\n            <div>\n                <button type = \"button\" onClick ={() => {this.setState([this.state.selected,[]]);}} >add new group</button>\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <div class = \"droppable\">\n                <Droppable droppableId=\"droppable\" direction = \"horizontal\">\n                    {(provided, snapshot) => (\n                        <div \n                            ref={provided.innerRef}\n                            \n                            style={getListStyle(snapshot.isDraggingOver)}>\n                                <p>tree</p>\n                                <div class = \"item\">\n                            {this.state.items.map((item, index) => (\n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}>\n                                    {(provided, snapshot) => (\n                                        <div \n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            \n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            </div>\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n                </div>\n                <div className = \"droppable2\">\n                <Droppable droppableId=\"droppable2\">\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            \n                            style={getListStyle(snapshot.isDraggingOver)}>\n                                <p>garden</p>\n                                <div className = \"item\">\n                            {this.state.selected.map((item, index) => (\n            \n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            \n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            </div>\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n                </div>\n                <div className = \"div2\">\n                {/* <Droppable droppableId=\"droppable3\">\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            style={getListStyle(snapshot.isDraggingOver)}>\n                            {this.state.extension.map((item, index) => (\n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable> */}\n                </div>\n            </DragDropContext>\n            </div>\n        );\n    }\n}\n\n\nexport default test;\n","/Users/sojeong/madCamp_week3/src/route/MyTree.js",[],"/Users/sojeong/madCamp_week3/src/route/Dialog.js",[],"/Users/sojeong/madCamp_week3/src/route/DoneDialog.js",[],"/Users/sojeong/madCamp_week3/src/initial-data.js",[],"/Users/sojeong/madCamp_week3/src/route/Timer.js",[],"/Users/sojeong/madCamp_week3/src/Task.jsx",[],"/Users/sojeong/madCamp_week3/src/route/SetTimer.js",["164","165"],"import { ImageExposureZero } from 'material-ui/svg-icons';\nimport React, { Component } from 'react';\nimport '../style/SetTimer.css';\nimport Home from \"./Home\";\n\nclass SetTimer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hours: 0,\n      minutes: 0,\n      seconds:0,\n      isZero: false\n    }\n    this.hoursInput = React.createRef();\n    this.minutesInput= React.createRef();\n    this.secondsInput = React.createRef();\n  }\n\n  inputHandler = (e) => {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  convertToSeconds = ( hours, minutes, seconds) => {\n    return seconds + minutes * 60 + hours * 60 * 60;\n  }\n\n  startTimer = () => {\n    this.timer = setInterval(this.countDown, 1000);\n  }\n\n\n  countDown = () => {\n    const  { hours, minutes, seconds } = this.state;\n    let c_seconds = this.convertToSeconds(hours, minutes, seconds);\n    if (!this.props.toDoIsNotEmpty && !this.props.InProgressIsNotEmpty){ // 우선 할일을 다 하게 되면\n      this.stopTimer();\n    } else { // 할일 다 안했으면\n      if ( hours === 0 &&  minutes === 0 & seconds === 0){ // time over\n        alert(`시간 내에 할일을 다 못하셨군요... 꽃이 죽었어요ㅠㅠ`)\n      }\n    }\n    \n    if(c_seconds) {\n\n      // seconds change\n      seconds ? this.setState({seconds: seconds-1}) : this.setState({seconds: 59});\n\n      // minutes change\n      if(c_seconds % 60 === 0 && minutes) {\n        this.setState({minutes: minutes -1});\n      }\n\n      // when only hours entered\n      if(!minutes && hours) {\n        this.setState({minutes: 59});\n      }\n\n      // hours change\n      if(c_seconds % 3600 === 0 && hours) {\n        this.setState({hours: hours-1});\n      }\n\n    } else {\n      clearInterval(this.timer);\n    } \n  }\n\n  stopTimer = () => {\n    clearInterval(this.timer);\n  }\n\n  resetTimer = () => {\n    this.setState({\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    });\n    this.hoursInput.current.value = 0;\n    this.minutesInput.current.value = 0;\n    this.secondsInput.current.value = 0;\n  }\n\n  render() {\n    const { hours, minutes, seconds } = this.state;\n\n    return (\n      <div className=\"SetTimer\">\n        <h1 className=\"timer-title\"> Timer</h1>\n\n        <label for=\"hours\">Hour: </label>\n        <input ref={this.hoursInput} type=\"number\" class =\"form-control input-lg\" placeholder={\"set the hour\"}  name=\"hours\" onChange={this.inputHandler} />\n        \n        <label for=\"minutes\">Min:   </label>\n        <input ref={this.minutesInput} type=\"number\" class =\"form-control input-lg\" placeholder={\"set the minutes\"}   name=\"minutes\"  onChange={this.inputHandler} />\n        \n        <label for=\"seconds\">Sec:   </label>\n        <input ref={this.secondsInput} type=\"number\" class =\"form-control input-lg\" placeholder={\"set the seconds\"}  name=\"seconds\"  onChange={this.inputHandler} />\n        \n         <div>\n            <button onClick={this.startTimer} className=\"start\">start</button>\n            <button onClick={this.stopTimer}  className=\"stop\">stop</button>\n            <button onClick={this.resetTimer}  className=\"reset\">reset</button>\n         </div>\n         <h2 className = \"timer-settimer\"> Timer {hours}: {minutes} : {seconds} </h2>\n      </div>\n\n    );\n  }\n}\n\nexport default SetTimer;","/Users/sojeong/madCamp_week3/src/Sign/SignUpForm.js",[],"/Users/sojeong/madCamp_week3/src/Sign/validate.js",[],"/Users/sojeong/madCamp_week3/src/Sign/PasswordStr.js",[],{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":6,"column":8,"nodeType":"172","messageId":"173","endLine":6,"endColumn":15},{"ruleId":"170","severity":1,"message":"174","line":10,"column":8,"nodeType":"172","messageId":"173","endLine":10,"endColumn":13},{"ruleId":"170","severity":1,"message":"175","line":11,"column":8,"nodeType":"172","messageId":"173","endLine":11,"endColumn":12},{"ruleId":"170","severity":1,"message":"176","line":1,"column":16,"nodeType":"172","messageId":"173","endLine":1,"endColumn":20},{"ruleId":"170","severity":1,"message":"177","line":2,"column":9,"nodeType":"172","messageId":"173","endLine":2,"endColumn":12},{"ruleId":"170","severity":1,"message":"178","line":2,"column":14,"nodeType":"172","messageId":"173","endLine":2,"endColumn":17},{"ruleId":"170","severity":1,"message":"179","line":2,"column":19,"nodeType":"172","messageId":"173","endLine":2,"endColumn":28},{"ruleId":"180","severity":1,"message":"181","line":20,"column":4,"nodeType":"182","endLine":20,"endColumn":28},{"ruleId":"170","severity":1,"message":"183","line":1,"column":16,"nodeType":"172","messageId":"173","endLine":1,"endColumn":25},{"ruleId":"170","severity":1,"message":"184","line":2,"column":8,"nodeType":"172","messageId":"173","endLine":2,"endColumn":16},{"ruleId":"170","severity":1,"message":"185","line":3,"column":8,"nodeType":"172","messageId":"173","endLine":3,"endColumn":13},{"ruleId":"170","severity":1,"message":"186","line":4,"column":8,"nodeType":"172","messageId":"173","endLine":4,"endColumn":13},{"ruleId":"170","severity":1,"message":"187","line":5,"column":10,"nodeType":"172","messageId":"173","endLine":5,"endColumn":16},{"ruleId":"188","severity":1,"message":"189","line":11,"column":14,"nodeType":"190","messageId":"191","endLine":11,"endColumn":30,"fix":"192"},{"ruleId":null,"fatal":true,"severity":2,"message":"193","line":15,"column":28},{"ruleId":"170","severity":1,"message":"175","line":5,"column":8,"nodeType":"172","messageId":"173","endLine":5,"endColumn":12},{"ruleId":"170","severity":1,"message":"194","line":6,"column":8,"nodeType":"172","messageId":"173","endLine":6,"endColumn":16},{"ruleId":"170","severity":1,"message":"195","line":7,"column":8,"nodeType":"172","messageId":"173","endLine":7,"endColumn":12},{"ruleId":"170","severity":1,"message":"196","line":8,"column":8,"nodeType":"172","messageId":"173","endLine":8,"endColumn":12},{"ruleId":"170","severity":1,"message":"197","line":9,"column":8,"nodeType":"172","messageId":"173","endLine":9,"endColumn":14},{"ruleId":"170","severity":1,"message":"198","line":10,"column":8,"nodeType":"172","messageId":"173","endLine":10,"endColumn":13},{"ruleId":"170","severity":1,"message":"187","line":11,"column":10,"nodeType":"172","messageId":"173","endLine":11,"endColumn":16},{"ruleId":"170","severity":1,"message":"199","line":13,"column":8,"nodeType":"172","messageId":"173","endLine":13,"endColumn":14},{"ruleId":"170","severity":1,"message":"200","line":1,"column":17,"nodeType":"172","messageId":"173","endLine":1,"endColumn":25},{"ruleId":"170","severity":1,"message":"201","line":7,"column":8,"nodeType":"172","messageId":"173","endLine":7,"endColumn":14},{"ruleId":"170","severity":1,"message":"174","line":8,"column":8,"nodeType":"172","messageId":"173","endLine":8,"endColumn":13},{"ruleId":"170","severity":1,"message":"202","line":10,"column":8,"nodeType":"172","messageId":"173","endLine":10,"endColumn":12},{"ruleId":"170","severity":1,"message":"203","line":11,"column":10,"nodeType":"172","messageId":"173","endLine":11,"endColumn":35},{"ruleId":"170","severity":1,"message":"204","line":56,"column":13,"nodeType":"172","messageId":"173","endLine":56,"endColumn":17},{"ruleId":"205","severity":1,"message":"206","line":57,"column":7,"nodeType":"190","endLine":57,"endColumn":36},{"ruleId":"180","severity":1,"message":"181","line":201,"column":17,"nodeType":"182","endLine":201,"endColumn":76},{"ruleId":"170","severity":1,"message":"207","line":1,"column":8,"nodeType":"172","messageId":"173","endLine":1,"endColumn":13},{"ruleId":"170","severity":1,"message":"208","line":2,"column":13,"nodeType":"172","messageId":"173","endLine":2,"endColumn":20},{"ruleId":"170","severity":1,"message":"209","line":3,"column":13,"nodeType":"172","messageId":"173","endLine":3,"endColumn":20},{"ruleId":"170","severity":1,"message":"210","line":4,"column":13,"nodeType":"172","messageId":"173","endLine":4,"endColumn":20},{"ruleId":"170","severity":1,"message":"183","line":1,"column":17,"nodeType":"172","messageId":"173","endLine":1,"endColumn":26},{"ruleId":"170","severity":1,"message":"184","line":2,"column":8,"nodeType":"172","messageId":"173","endLine":2,"endColumn":16},{"ruleId":"188","severity":1,"message":"189","line":12,"column":14,"nodeType":"190","messageId":"191","endLine":12,"endColumn":30,"fix":"211"},{"ruleId":"170","severity":1,"message":"183","line":1,"column":17,"nodeType":"172","messageId":"173","endLine":1,"endColumn":26},{"ruleId":"188","severity":1,"message":"189","line":31,"column":18,"nodeType":"190","messageId":"191","endLine":31,"endColumn":34,"fix":"212"},{"ruleId":"188","severity":1,"message":"189","line":37,"column":18,"nodeType":"190","messageId":"191","endLine":37,"endColumn":36,"fix":"213"},{"ruleId":"170","severity":1,"message":"214","line":1,"column":10,"nodeType":"172","messageId":"173","endLine":1,"endColumn":27},{"ruleId":"170","severity":1,"message":"215","line":4,"column":8,"nodeType":"172","messageId":"173","endLine":4,"endColumn":12},"no-native-reassign",["216"],"no-negated-in-lhs",["217"],"no-unused-vars","'Profile' is defined but never used.","Identifier","unusedVar","'Timer' is defined but never used.","'Grid' is defined but never used.","'Text' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Container' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Component' is defined but never used.","'ReactDOM' is defined but never used.","'Popup' is defined but never used.","'Modal' is defined but never used.","'Button' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property k+ offset.","MemberExpression","unexpectedWhitespace",{"range":"218","text":"219"},"Parsing error: Const declarations require an initialization value\n\n\u001b[0m \u001b[90m 13 | \u001b[39m  \u001b[36mconst\u001b[39m emailText \u001b[33m=\u001b[39m localStorage\u001b[33m.\u001b[39mgetItem(\u001b[32m\"email\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 14 | \u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 15 | \u001b[39m  \u001b[36mconst\u001b[39m [toggle\u001b[33m,\u001b[39m setToggle]\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 16 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 17 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 18 | \u001b[39m  \u001b[36mconst\u001b[39m \u001b[33mName\u001b[39m \u001b[33m=\u001b[39m({onChange\u001b[33m,\u001b[39mvalue})\u001b[33m=>\u001b[39m\u001b[0m","'TreeList' is defined but never used.","'Test' is defined but never used.","'Tree' is defined but never used.","'Ground' is defined but never used.","'grass' is defined but never used.","'MyTree' is defined but never used.","'useState' is defined but never used.","'Dialog' is defined but never used.","'Fade' is defined but never used.","'CommunicationSpeakerPhone' is defined but never used.","'item' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","'React' is defined but never used.","'FaIcons' is defined but never used.","'AiIcons' is defined but never used.","'IoIcons' is defined but never used.",{"range":"220","text":"219"},{"range":"221","text":"219"},{"range":"222","text":"219"},"'ImageExposureZero' is defined but never used.","'Home' is defined but never used.","no-global-assign","no-unsafe-negation",[477,478],"",[435,436],[1043,1044],[1221,1222]]