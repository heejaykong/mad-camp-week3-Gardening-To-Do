[{"C:\\Users\\q\\mad-camp-week3\\src\\index.js":"1","C:\\Users\\q\\mad-camp-week3\\src\\initial-data.js":"2","C:\\Users\\q\\mad-camp-week3\\src\\column.jsx":"3","C:\\Users\\q\\mad-camp-week3\\src\\task.jsx":"4","C:\\Users\\q\\mad-camp-week3\\src\\Column.jsx":"5","C:\\Users\\q\\mad-camp-week3\\src\\Task.jsx":"6","C:\\Users\\q\\mad-camp-week3\\src\\App.js":"7","C:\\Users\\q\\mad-camp-week3\\src\\Navbar.js":"8","C:\\Users\\q\\mad-camp-week3\\src\\route\\Home.js":"9","C:\\Users\\q\\mad-camp-week3\\src\\route\\Profile.js":"10","C:\\Users\\q\\mad-camp-week3\\src\\route\\MyGarden.js":"11","C:\\Users\\q\\mad-camp-week3\\src\\SidebarData.js":"12"},{"size":5947,"mtime":1610727687910,"results":"13","hashOfConfig":"14"},{"size":806,"mtime":1610727687911,"results":"15","hashOfConfig":"14"},{"size":1504,"mtime":1610700427108,"results":"16","hashOfConfig":"14"},{"size":850,"mtime":1610705842614,"results":"17","hashOfConfig":"14"},{"size":1515,"mtime":1610727590611,"results":"18","hashOfConfig":"14"},{"size":972,"mtime":1610720793272,"results":"19","hashOfConfig":"14"},{"size":617,"mtime":1610728228586,"results":"20","hashOfConfig":"14"},{"size":1422,"mtime":1610727687909,"results":"21","hashOfConfig":"14"},{"size":4866,"mtime":1610728221749,"results":"22","hashOfConfig":"14"},{"size":196,"mtime":1610727687912,"results":"23","hashOfConfig":"14"},{"size":207,"mtime":1610727687912,"results":"24","hashOfConfig":"14"},{"size":530,"mtime":1610727687909,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7bmelu",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\q\\mad-camp-week3\\src\\index.js",[],"C:\\Users\\q\\mad-camp-week3\\src\\initial-data.js",[],["52","53"],"C:\\Users\\q\\mad-camp-week3\\src\\column.jsx",[],"C:\\Users\\q\\mad-camp-week3\\src\\task.jsx",[],"C:\\Users\\q\\mad-camp-week3\\src\\Column.jsx",[],"C:\\Users\\q\\mad-camp-week3\\src\\Task.jsx",[],"C:\\Users\\q\\mad-camp-week3\\src\\App.js",[],"C:\\Users\\q\\mad-camp-week3\\src\\Navbar.js",[],"C:\\Users\\q\\mad-camp-week3\\src\\route\\Home.js",["54"],"import React from \"react\";\r\n//import ReactDOM from \"react-dom\";\r\nimport styled from 'styled-components';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\nimport initialData from \"../initial-data\";\r\nimport Column from '../Column.jsx';\r\n\r\n// Styles\r\nconst Container = styled.div`\r\n display: flex;\r\n`;\r\n\r\nclass Home extends React.Component {\r\n  state = initialData; //initialData는 지금은 따로 파일에서 하드코딩한 상태. 이제 DB에서 어케 부를지 방법을 찾아보자.\r\n\r\n  // 드래그가 시작되면\r\n  onDragStart = (start, provided) => {\r\n    document.body.style.transition = 'background-color 0.2s ease';\r\n  }\r\n  // 드래그를 해서 상황이 업데이트되면\r\n  onDragUpdate = update => {\r\n    const { destination } = update;\r\n    const opacity = destination ?\r\n      destination.index / Object.keys(this.state.tasks).length\r\n      : 0;\r\n    document.body.style.backgroundColor = `rgba(153,  141, 217, ${opacity})`;\r\n  }\r\n  //딱 드롭했을 때가 되면\r\n  onDragEnd = result => {\r\n    console.log(result);\r\n    document.body.style.color = 'inherit';\r\n    document.body.style.backgroundColor = 'inherit';\r\n\r\n    const { destination, source, draggableId, type } = result;\r\n\r\n    //Task가 옮겨졌을 때 처리하기\r\n    if (!destination) { //이상한 아예 바깥 곳에 놓았을 경우\r\n      return;\r\n    }\r\n    if ( //이전 위치와 같은 곳에 놓았을 경우\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n    if(destination.droppableId === 'column-3'){ // Task가 Done 칼럼으로 옮겨졌을 경우\r\n      this.state.tasks[draggableId].isDone = true; // 해당 Task를 disableDraggable 한다\r\n    }\r\n\r\n    //여기서 잠깐... Column 옮겨졌을 때 처리하기\r\n    if(type === 'column') {\r\n      const newColumnOrder = Array.from(this.state.columnOrder);\r\n      newColumnOrder.splice(source.index, 1);\r\n      newColumnOrder.splice(destination.index, 0, draggableId);\r\n\r\n      const newState = {\r\n        ...this.state,\r\n        columnOrder: newColumnOrder\r\n      };\r\n      this.setState(newState);\r\n      return;\r\n    }\r\n\r\n    // persist reordering of task that has been moved within a list\r\n    // Task가 Column 내에서 옮겨졌을 때 그 옮겨진 자리가 유지되도록 처리하기\r\n    const start = this.state.columns[source.droppableId];\r\n    const finish = this.state.columns[destination.droppableId];\r\n\r\n    if (start === finish) {\r\n      const newTaskIds = Array.from(start.taskIds);\r\n      newTaskIds.splice(source.index, 1);\r\n      newTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n      const newColumn = {\r\n        ...start,\r\n        taskIds: newTaskIds\r\n      };\r\n      const newState = {\r\n        ...this.state,\r\n        columns: {\r\n          ...this.state.columns,\r\n          [newColumn.id]: newColumn\r\n        },\r\n      };\r\n\r\n      this.setState(newState);\r\n      return;\r\n    }\r\n\r\n    // persist reordering of task that has been moved from one list to another\r\n    // Task가 Column 너머 옮겨졌을 때 그 옮겨진 자리가 유지되도록 처리하기\r\n    const startTaskIds = Array.from(start.taskIds);\r\n    startTaskIds.splice(source.index, 1);\r\n    const newStart = {\r\n      ...start,\r\n      taskIds: startTaskIds\r\n    };\r\n    const finishTaskIds = Array.from(finish.taskIds);\r\n    finishTaskIds.splice(destination.index, 0, draggableId);\r\n    const newFinish = {\r\n      ...finish,\r\n      taskIds: finishTaskIds\r\n    };\r\n\r\n    const newState = {\r\n      ...this.state,\r\n      columns: {\r\n        ...this.state.columns,\r\n        [newStart.id]: newStart,\r\n        [newFinish.id]: newFinish,\r\n      },\r\n    }\r\n    this.setState(newState)\r\n\r\n    // TODO: 그리고 이렇게 reorder된 index값들을 디비에 저장해야 refresh했을 때도 유지될 수 있는데, 어떻게 하지?\r\n\r\n  };\r\n\r\n        \r\n  render() {\r\n    return (\r\n      <DragDropContext\r\n        onDragEnd={this.onDragEnd}\r\n        onDragStart={this.onDragStart}\r\n        onDragUpdate={this.onDragUpdate}\r\n      >\r\n        <Droppable\r\n          droppableId=\"all-columns\"\r\n          direction=\"horizontal\"\r\n          type=\"column\"\r\n        >\r\n          {provided => (\r\n            <Container\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n            >\r\n              {this.state.columnOrder.map((columnId, index) => {\r\n                const column = this.state.columns[columnId];\r\n                const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\r\n                return <Column key={column.id} column={column} tasks={tasks} index={index} />;\r\n              })}\r\n              {provided.placeholder}\r\n            </Container>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\q\\mad-camp-week3\\src\\route\\Profile.js",[],"C:\\Users\\q\\mad-camp-week3\\src\\route\\MyGarden.js",[],"C:\\Users\\q\\mad-camp-week3\\src\\SidebarData.js",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":47,"column":7,"nodeType":"61","endLine":47,"endColumn":36},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-global-assign","no-unsafe-negation"]