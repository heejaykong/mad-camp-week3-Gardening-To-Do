[{"/Users/sojeong/madCamp_week3/src/index.js":"1","/Users/sojeong/madCamp_week3/src/App.js":"2","/Users/sojeong/madCamp_week3/src/Navbar.js":"3","/Users/sojeong/madCamp_week3/src/route/Profile.js":"4","/Users/sojeong/madCamp_week3/src/route/Login.js":"5","/Users/sojeong/madCamp_week3/src/route/Grid.js":"6","/Users/sojeong/madCamp_week3/src/route/TreeColumn.js":"7","/Users/sojeong/madCamp_week3/src/route/MyGarden.js":"8","/Users/sojeong/madCamp_week3/src/Sign/SignUp.js":"9","/Users/sojeong/madCamp_week3/src/route/Home.js":"10","/Users/sojeong/madCamp_week3/src/route/MyProfile.js":"11","/Users/sojeong/madCamp_week3/src/route/Tree.js":"12","/Users/sojeong/madCamp_week3/src/route/TreeList.js":"13","/Users/sojeong/madCamp_week3/src/route/MyTree.js":"14","/Users/sojeong/madCamp_week3/src/route/Test.js":"15","/Users/sojeong/madCamp_week3/src/route/Dialog.js":"16","/Users/sojeong/madCamp_week3/src/Sign/SignUpContainer.js":"17","/Users/sojeong/madCamp_week3/src/SidebarData.js":"18","/Users/sojeong/madCamp_week3/src/Sign/SignUpForm.js":"19","/Users/sojeong/madCamp_week3/src/Sign/validate.js":"20","/Users/sojeong/madCamp_week3/src/Sign/PasswordStr.js":"21","/Users/sojeong/madCamp_week3/src/Column.jsx":"22","/Users/sojeong/madCamp_week3/src/initial-data.js":"23","/Users/sojeong/madCamp_week3/src/route/DoneDialog.js":"24","/Users/sojeong/madCamp_week3/src/route/Timer.js":"25","/Users/sojeong/madCamp_week3/src/route/SetTimer.js":"26","/Users/sojeong/madCamp_week3/src/Task.jsx":"27"},{"size":179,"mtime":1611031437205,"results":"28","hashOfConfig":"29"},{"size":895,"mtime":1611059347104,"results":"30","hashOfConfig":"29"},{"size":1502,"mtime":1611031437203,"results":"31","hashOfConfig":"29"},{"size":741,"mtime":1611031437208,"results":"32","hashOfConfig":"29"},{"size":1909,"mtime":1611065092704,"results":"33","hashOfConfig":"29"},{"size":4184,"mtime":1611031437207,"results":"34","hashOfConfig":"29"},{"size":1473,"mtime":1611031437209,"results":"35","hashOfConfig":"29"},{"size":873,"mtime":1611065052543,"results":"36","hashOfConfig":"29"},{"size":610,"mtime":1611031437204,"results":"37","hashOfConfig":"29"},{"size":7446,"mtime":1611065017700,"results":"38","hashOfConfig":"29"},{"size":5592,"mtime":1611066391535,"results":"39","hashOfConfig":"29"},{"size":90,"mtime":1611031437209,"results":"40","hashOfConfig":"29"},{"size":5105,"mtime":1611031437209,"results":"41","hashOfConfig":"29"},{"size":1100,"mtime":1611037220322,"results":"42","hashOfConfig":"29"},{"size":10321,"mtime":1611031437208,"results":"43","hashOfConfig":"29"},{"size":2487,"mtime":1611065210188,"results":"44","hashOfConfig":"29"},{"size":3252,"mtime":1611043407638,"results":"45","hashOfConfig":"29"},{"size":577,"mtime":1611031437203,"results":"46","hashOfConfig":"29"},{"size":1997,"mtime":1611059273352,"results":"47","hashOfConfig":"29"},{"size":2054,"mtime":1611031437205,"results":"48","hashOfConfig":"29"},{"size":798,"mtime":1611031437204,"results":"49","hashOfConfig":"29"},{"size":2328,"mtime":1611077339569,"results":"50","hashOfConfig":"29"},{"size":1085,"mtime":1611043407639,"results":"51","hashOfConfig":"29"},{"size":1881,"mtime":1611031437206,"results":"52","hashOfConfig":"29"},{"size":2749,"mtime":1611040112237,"results":"53","hashOfConfig":"29"},{"size":4078,"mtime":1611064114743,"results":"54","hashOfConfig":"29"},{"size":1678,"mtime":1611062336543,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"16g871s",{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"90","usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"95","usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"58"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"/Users/sojeong/madCamp_week3/src/index.js",[],["126","127"],"/Users/sojeong/madCamp_week3/src/App.js",["128","129","130"],"import React from 'react';\nimport './style/App.css';\nimport Navbar from './Navbar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Profile from './route/Profile';\nimport MyGarden from './route/MyGarden';\nimport Home from './route/Home'\nimport SignUp from './Sign/SignUp'\nimport Timer from './route/TreeColumn'\nimport Grid from './route/Grid'\nimport Login from './route/Login'\nimport MyProfile from './route/MyProfile'\n\n\nclass App extends React.Component {\n  render(){\n  return (\n    <Router>\n      <Navbar />\n      <Switch>\n        <Route path='/signup' exact component={SignUp} />\n        <Route path='/login' exact component={Login} />\n        <Route path='/' exact component={Home} />\n        <Route path='/profile' component={MyProfile} />\n        <Route path='/mygarden' component={MyGarden} />\n      </Switch>\n    </Router>\n  );\n}\n}\n\nexport default App;","/Users/sojeong/madCamp_week3/src/Navbar.js",[],"/Users/sojeong/madCamp_week3/src/route/Profile.js",["131","132","133","134","135"],"import React, {Text} from \"react\";\nimport {Row, Col, Container} from \"react-bootstrap\"\nimport img_woman from '../Image/woman.png';\n// import \"../style/Profile.css\"\nimport '../style/MyProfile.css';\nclass Profile extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t  nickname: \"sojeong\",\n\t\t  password:\"1234\",\n\t\t  lifeCount:\"10\",\n\t\t  killCount:\"2\"\n\t\t  }  \n\t\t};\n\trender(){\n\treturn (\n\t\t<div className='Profile'>\n\t\t\t{/* <motion.div animate = {{scale:0.5}}/> */}\n\t\t\t<img src = {img_woman}/>\n\t\t\t<p>name : {this.state.nickname}</p>\n\t\t\t<p>PassWord : {this.state.password}</p>\n\t\t\t<p>plant count : {this.state.lifeCount}</p>\n\t\t\t<p>dead plant count : {this.state.killCount}</p>\n\n\t\t</div>\n\n\t);\n\t}\n}\n\n\nexport default Profile;","/Users/sojeong/madCamp_week3/src/route/Login.js",[],"/Users/sojeong/madCamp_week3/src/route/Grid.js",["136"],"import React, { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"../style/grid.css\"\nconst tree = [\"🍋\", \"🍊\", \"🍈\", \"👩‍🦰\", \"👨‍🦱\", \"👱‍♀️\", \"👨\", \"🧒\", \"👩‍🦳\", \"👸\"];\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    //id: tree [k+ offset],//-new Date().getTime(),\n    id:  `item-${k + offset}-${new Date().getTime()}`,\n    content: tree [k+ offset] \n    //content: `item ${k + offset}`\n  }));\n\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250\n});\n\nfunction Grid (){\n  const [state, setState] = useState([getItems(3)])\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     items: getItems(10)\n  //   };\n  //   this.onDragEnd = this.onDragEnd.bind(this);\n  // }\nfunction onDragEnd(result) {\n    const { source, destination } = result;\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    const sInd = +source.droppableId;\n    const dInd = +destination.droppableId;\n    if (sInd === dInd) {\n      const items = reorder(state[sInd], source.index, destination.index);\n      const newState = [...state];\n      newState[sInd] = items;\n      setState(newState);\n    } else {\n      const result = move(state[sInd], state[dInd], source, destination);\n      const newState = [...state];\n      newState[sInd] = result[sInd];\n      newState[dInd] = result[dInd];\n\n      setState(newState.filter(group => group.length));\n    }\n    // const items = reorder(\n    //   this.state.items,\n    //   result.source.index,\n    //   result.destination.index\n    // );\n\n    // this.setState({\n    //   items\n    // });\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n\n    return (\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"droppable\">\n          {(provided, snapshot) => (\n            <div className = \"grid\"\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n            >\n              {this.state.items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  \n}\n\nexport default Grid;\n","/Users/sojeong/madCamp_week3/src/route/TreeColumn.js",[],"/Users/sojeong/madCamp_week3/src/route/MyGarden.js",["137","138","139","140","141","142","143","144"],"import React from \"react\";\nimport '../style/MyGarden.css'\nimport Grid from \"./Grid\"\nimport TreeList from \"./TreeList\"\nimport Test from \"./Test\"\nimport Tree from \"./Tree\"\nimport Ground from '../Image/ground1.png';\nimport grass from '../Image/grass1.png';\nimport { Button } from \"react-bootstrap\";\nimport Dialog from \"./Dialog\";\nimport MyTree from \"./MyTree\"\n\nclass MyGarden extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            showDialog: true,\n        }\n    }\n    _showDialog() {\n        this.setState({showDialog: this.state.showDialog});\n    }\n\t_showItem() {\n        this.setState({item: this.state.itemFriends});\n    }\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='MyGarden'>\n                <div className=\"img-garden\"/>\n                <Dialog />         \n\t\t\t </div>\n\t\t);\n\t}\n} \n\nexport default MyGarden;\n    \n\n\n","/Users/sojeong/madCamp_week3/src/Sign/SignUp.js",["145","146","147","148","149"],"import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport Popup from 'reactjs-popup'\nimport Modal from 'react-modal'\nimport { Button } from 'reactstrap';\nimport SignUpContainer from \"./SignUpContainer\";\nimport MuiThemeProvider from \"material-ui/styles/MuiThemeProvider\";\n\nclass SignUp extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {name: \"hello\"};\n    }\n\n    render(){\n    return (\n        <MuiThemeProvider>\n            {this.props.children}\n            <SignUpContainer/>\n        </MuiThemeProvider>\n    );\n    }\n}\n\nexport default SignUp;","/Users/sojeong/madCamp_week3/src/route/Home.js",["150","151","152","153","154","155","156"],"import React, { useState } from \"react\";\nimport styled from 'styled-components';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport initialData from \"../initial-data\";\nimport Column from '../Column.jsx';\nimport '../style/Home.css';\nimport '../style/SetTimer.css';\nimport Dialog from \"./DoneDialog\";\nimport SetTimer from \"./SetTimer\";\nimport Fade from '@material-ui/core/Fade'\nimport { CommunicationSpeakerPhone } from \"material-ui/svg-icons\";\n\n// Styles\nconst Container = styled.div`\n  display: flex;\n`;\n\n// let flowers = [];\nclass Home extends React.Component {\n  state = initialData; //initialData는 지금은 따로 파일에서 하드코딩한 상태. 이제 DB에서 어케 부를지 방법을 찾아보자.\n\n  // 드래그가 시작되면\n  onDragStart = (startColumn, provided) => {\n    document.body.style.transition = 'background-color 0.2s ease';\n  }\n  // 드래그를 해서 상황이 업데이트되면\n  onDragUpdate = update => {\n    const { destination } = update;\n    const opacity = destination ?\n      destination.index / Object.keys(this.state.tasks).length\n      : 0;\n    document.body.style.backgroundColor = `rgba(153,  141, 217, ${opacity})`;\n  }\n  //딱 드롭했을 때가 되면\n  onDragEnd = result => {\n    document.body.style.color = 'inherit';\n    document.body.style.backgroundColor = 'inherit';\n    const { destination, source, draggableId, type } = result;\n\n    // Task가 옮겨졌을 때 처리하기\n    if (!destination) { // 1. 아예 이상한 바깥 곳에 놓았을 경우\n      return;\n    }\n    if ( // 2. 이전 위치와 같은 곳에 놓았을 경우\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    // 3. Task가 Done 칼럼으로 옮겨졌을 경우\n    if (destination.droppableId === 'column-3') {\n\n      const item = \"🌞\";\n      this.state.tasks[draggableId].isDone = true; // 해당 Task를 disableDraggable 한다\n      //showItem(item);\n    }\n    // showItem(item)=() =>{\n    //   <div>\n    //   <Fade in={true} timeout={4000}>\n    //     <p>True Component</p>\n    //   </Fade>\n\n    //   <Fade in={false} timeout={4000}>\n    //     <p>False Component</p>\n    //   </Fade>\n    //   </div>\n    //   // return <Fade className=\"fade-in\" timeout = {2000}> itemcreate {console.log(\"fade in\")} </Fade>\n    // }\n\n\n    // 여기서 잠깐... Column 자체가 옮겨졌을 때 처리하기\n    if (type === 'column') {\n      const newColumnOrder = Array.from(this.state.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n\n      const newState = {\n        ...this.state,\n        columnOrder: newColumnOrder\n      };\n      this.setState(newState);\n      return;\n    }\n\n    const startColumn = this.state.columns[source.droppableId];\n    const finishColumn = this.state.columns[destination.droppableId];\n    \n    // 4. persist reordering of task that has been moved within a list\n    // 4. Task가 Column 내에서 옮겨졌을 때 그 옮겨진 자리가 유지되도록 처리하기\n    if (startColumn === finishColumn) {\n      const newTaskIds = Array.from(startColumn.taskIds);\n      newTaskIds.splice(source.index, 1); // 우선 옮겨짐 당한 Task를 원래 자리에서 없애고\n      newTaskIds.splice(destination.index, 0, draggableId); // 옮긴 후의 그 자리에 끼워넣는다\n\n      const newColumn = { // Column 내 Task들 갱신\n        ...startColumn,\n        taskIds: newTaskIds\n      };\n      const newState = { // Column 갱신\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n\n      this.setState(newState);\n      return;\n    }\n\n    // 5. persist reordering of task that has been moved from one list to another\n    // 5. Task가 Column 너머 옮겨졌을 때 그 옮겨진 자리가 유지되도록 처리하기\n    const startTaskIds = Array.from(startColumn.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...startColumn,\n      taskIds: startTaskIds\n    };\n    const finishTaskIds = Array.from(finishColumn.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n    const newFinish = {\n      ...finishColumn,\n      taskIds: finishTaskIds\n    };\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      },\n    }\n    this.setState(newState)\n    \n    console.log(\"Todo is \"+newState.columns[\"column-1\"].taskIds);\n    console.log(\"In Progress is \"+newState.columns[\"column-2\"].taskIds);\n    \n    // 6. Task가 Column 너머 옮겨졌을 때, 이제 더이상 To-do, In Progress Column에 아무 것도 없을 경우(즉 전부 Done칼럼으로 옮겨졌을 경우)\n    const toDoIsNotEmpty = newState.columns[\"column-1\"].taskIds.length;\n    const InProgressIsNotEmpty = newState.columns[\"column-2\"].taskIds.length;\n    const FLOWERS = [\"🌹\",\"🌺\",\"🌻\",\"🌼\",\"🌷\",\"🍀\",\"🌵\"];\n    const FLOWER_COUNT = 7;\n    const LS_KEY_FLOWERS = \"flowers\";\n\n    if (!toDoIsNotEmpty && !InProgressIsNotEmpty) {\n      const randomIndex = Math.floor(Math.random() * FLOWER_COUNT);\n      const theFlower = FLOWERS[randomIndex];\n      alert(`Congratulations!\\nYou've got your Flower:\\n${theFlower}`);\n\n      let currentFlowersString = getFlower();\n      if (!currentFlowersString){ // local에 아무것도 없음\n        currentFlowersString = theFlower;\n      }\n      else\n      currentFlowersString += (\",\"+theFlower);\n\n      saveFlower(currentFlowersString);\n    }\n    function getFlower(){\n      return localStorage.getItem(LS_KEY_FLOWERS);\n    }\n    function saveFlower(flowers){\n      \n      localStorage.setItem(LS_KEY_FLOWERS, flowers);\n    }\n\n    // TODO: 그리고 이렇게 reorder된 index값들을 디비에 저장해야 refresh했을 때도 유지될 수 있는데, 어떻게 하지?\n\n  };\n\n  render() {\n    return (\n      <>\n      <SetTimer\n        toDoIsNotEmpty={this.state.columns[\"column-1\"].taskIds.length}\n        InProgressIsNotEmpty={this.state.columns[\"column-2\"].taskIds.length}\n      />\n      {/* <div className=\"home\"> */}\n        <div className=\"toDoContainer\">\n          <DragDropContext\n          onDragEnd={this.onDragEnd}\n          onDragStart={this.onDragStart}\n          onDragUpdate={this.onDragUpdate}\n          >\n            <Droppable\n              droppableId=\"all-columns\"\n              direction=\"horizontal\"\n              type=\"column\"\n            >\n              {provided => (\n                <Container\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                >\n                  {this.state.columnOrder.map((columnId, index) => {\n                    const column = this.state.columns[columnId];\n                    const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n                    return <Column key={column.id} column={column} tasks={tasks} index={index} />;\n                  })}\n                  {provided.placeholder}\n                  \n                </Container>\n              )}\n            </Droppable>\n          </DragDropContext>\n        </div>\n        <div className=\"budImageContainer\">\n          <img src=\"https://www.pngrepo.com/png/169302/180/bud.png\"/>\n        </div>\n      {/* </div> */}\n      </>\n    );\n  }\n}\n\nexport default Home;\n","/Users/sojeong/madCamp_week3/src/route/MyProfile.js",["157","158","159"],"import React, {useState} from \"react\";\nimport '../style/MyProfile.css';\nconst ImgUpload =({onChange,src})=>\n<label htmlFor=\"photo-upload\" className=\"custom-file-upload fas\">\n      <div className=\"img-wrap img-upload\" >\n        <img htmlFor=\"photo-upload\" src={src}/>\n      </div>\n      <input id=\"photo-upload\" type=\"file\" onChange={onChange}/> \n    </label>\n\n  const nameText = localStorage.getItem(\"name\");\n  const passText = localStorage.getItem(\"pass\");\n  const emailText = localStorage.getItem(\"email\");\n  const all_plantText = localStorage.getItem(\"all_plant\");\n  const kill_plantText = localStorage.getItem(\"kill_plant\");\n\n  console.log(\"all_plantText \", all_plantText)\n\n  // var [toggle, setToggle] = React.useState(true);\n  // var [text, setText] = React.useState(nameText);\n\n  // function toggleInput(){\n  //   setToggle(false);\n  // }\n\n  // function handleChange(event) {\n  //   setText(event.target.value);\n  // }\n  \n\n\n  const Name =({onChange,value})=>\n   \n    <div className=\"field\">\n      <label htmlFor=\"name\"> name: </label>\n      {/* {toggle ? (<p onDoubleClick={toggleInput}> {text}</p>) : (<input type=\"text\" value= {text} onChange={handleChange}/>)} */}\n      <h3>{nameText}</h3>\n      {/* <input id=\"name\" type=\"text\" onChange={onChange} maxLength=\"25\" value = \"hi\"/> */}\n    </div>\n  \n  \n    \n  const Status =({onChange, valueColumncar})=>\n    <div className=\"field\">\n      <label htmlFor=\"status\">PASSWORD:</label>\n      <h3>{passText}</h3>\n      {/* <input id=\"status\" type=\"text\" onChange={onChange}  maxLength=\"35\"  required/> */}\n    </div>\n\nconst Email =({onChange,valueColumncar})=>\n<div className=\"field\">\n  <label htmlFor=\"email\">EMAIL</label>\n  <h3>{emailText}</h3>\n  {/* <input id=\"email\" type=\"text\" onChange={onChange}  maxLength=\"35\"  required/> */}\n</div>\n\n  const KillCount =({onChange,valueColumncar})=>\n    <div className=\"field\">\n      <label htmlFor=\"killcount\">Kill Count </label>\n      <h3>{kill_plantText}</h3>\n      {console.log(kill_plantText)}\n      {/* <input id=\"killcount\" type=\"text\" onChange={onChange}  maxLength=\"35\"  required/> */}\n    </div>\n\n    const AllPlant =({onChange,valueColumncar})=>\n      <div className=\"field\">\n        <label htmlFor=\"AllPlant\"> All plant</label>\n        <h3>{all_plantText}</h3>\n        {console.log(all_plantText)}\n        </div>\n        {/* <input  id=\"AllPlant\"  type=\"text\"   onChange={onChange} maxLength=\"35\"   required/> */}\n      \n  \n  \n  const Profile =({\n    onSubmit,\n    src,\n    name,\n    status,\n    email,\n    KillCount,\n    AllPlant\n  })=>\n    <div className=\"card\">\n      <form onSubmit={onSubmit}>\n        <div className=\"name\">{name}</div>\n        <div className=\"status\">{status}</div>\n        <div className=\"email\">{email}</div>\n        <div className=\"KillCount\">{KillCount}</div>\n        <div className=\"AllPlant\">{AllPlant}</div>\n        {/* <button type=\"save\" className=\"edit\">Edit Profile </button> */}\n      </form>\n    </div>\n       \n        \n  const Edit =({ onSubmit, children})=>\n    <div className=\"card\">\n      <form onSubmit={onSubmit}>\n          {children}\n        {/* <button type=\"edit\" className=\"save\">edit </button> */}\n      </form>\n    </div>\n  \n  class MyProfile extends React.Component {\n    state = {\n      file: '',\n      imagePreviewUrl: 'https://github.com/OlgaKoplik/CodePen/blob/master/profile.jpg?raw=true',\n      name:'',\n      status:'',\n      email:'',\n      KillCount:'',\n      AllPlant:'',\n      active: 'edit'\n    }\n  \n    photoUpload = e =>{\n      e.preventDefault();\n      const reader = new FileReader();\n      const file = e.target.files[0];\n      reader.onloadend = () => {\n        this.setState({\n          file: file,\n          imagePreviewUrl: reader.result\n        });\n      }\n      reader.readAsDataURL(file);\n    }\n    editName = e =>{\n      const name = e.target.value;\n      this.setState({\n        name,\n      });\n    }\n    editEmail = e =>{\n      const email = e.target.value;\n      this.setState({\n        email,\n      });\n    }\n    \n    editStatus = e => {\n      const status = e.target.value;\n      this.setState({\n        status,\n      });\n    }\n    editKillCount = e => {\n      const KillCount = e.target.value;\n      this.setState({\n        KillCount,\n      });\n    }\n    editAllPlant = e => {\n      const AllPlant = e.target.value;\n      this.setState({\n        AllPlant,\n      });\n    }\n    \n    handleSubmit= e =>{\n      e.preventDefault();\n      let activeP = this.state.active === 'edit' ? 'profile' : 'edit';\n      this.setState({\n        active: activeP,\n      })\n    }\n    \n    render() {\n      const {imagePreviewUrl, \n             name, \n             status, email, killCount, allPlant,\n             active} = this.state;\n      return (\n        <div>\n          {(active === 'edit')?(\n            <Edit onSubmit={this.handleSubmit}>\n              <ImgUpload onChange={this.photoUpload} src={imagePreviewUrl}/>\n              <Name onChange={this.editName} value={name}/>\n              <Status onChange={this.editStatus} value={status}/>\n              <Email onChange={this.editEmail} value={email}/>\n              <KillCount onChange={this.editKillCount} value={killCount}/>\n              <AllPlant onChange={this.editAllPlant} value={allPlant}/>\n            </Edit>\n          ):(\n            <Profile \n              onSubmit={this.handleSubmit} \n              src={imagePreviewUrl} \n              name={name} \n              status={status}\n              email={email}\n              KillCount={KillCount}\n              AppPlant={AllPlant}/>)}\n          \n        </div>\n      )\n    }\n  }\n  \n export default MyProfile;","/Users/sojeong/madCamp_week3/src/route/Tree.js",[],"/Users/sojeong/madCamp_week3/src/route/TreeList.js",["160","161"],"import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nconst tree = [\"🍋\", \"🍊\", \"🍈\"];\n// fake data generator\nconst getItems = (count, offset = 0) =>\n    \n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    //id: tree [k+ offset],//-new Date().getTime(),\n    id:  `item-${k + offset}-${new Date().getTime()}`,\n    content: tree [k+ offset] \n    //content: `item ${k + offset}`\n  }));\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250\n});\n\nfunction TreeList() {\n  const [state, setState] = useState([getItems(3)])\n  //= useState([getItems(3), getItems(5, 10)]);\n\n  function onDragEnd(result) {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n    const sInd = +source.droppableId;\n    const dInd = +destination.droppableId;\n\n    if (sInd === dInd) {\n      const items = reorder(state[sInd], source.index, destination.index);\n      const newState = [...state];\n      newState[sInd] = items;\n      setState(newState);\n    } else {\n      const result = move(state[sInd], state[dInd], source, destination);\n      const newState = [...state];\n      newState[sInd] = result[sInd];\n      newState[dInd] = result[dInd];\n\n      setState(newState.filter(group => group.length));\n    }\n  }\n\n  return (\n    <div>\n       {/* <button\n        type=\"button\"\n        onClick={() => {\n          setState([...state, []]);\n        }}\n      >\n        Add new group\n      </button> \n      <button\n        type=\"button\"\n        onClick={() => {\n          setState([...state, getItems(1)]);\n        }}\n      >\n        Add new item\n      </button>  */}\n      <div style={{ display: \"flex\" }}>\n        <DragDropContext onDragEnd={onDragEnd}>\n          {state.map((el, ind) => (\n            <Droppable key={ind} droppableId={`${ind}`}>\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                  {...provided.droppableProps}\n                >\n                  {el.map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id}\n                      index={index}\n                    >\n                      {(provided, snapshot) => (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          )}\n                        >\n                          <div\n                            style={{\n                              display: \"flex\",\n                              justifyContent: \"space-around\"\n                            }}\n                          >\n                            {item.content}\n                            {/* <button\n                              type=\"button\"\n                              onClick={() => {\n                                const newState = [...state];\n                                newState[ind].splice(index, 1);\n                                setState(\n                                  newState.filter(group => group.length)\n                                );\n                              }}\n                            >\n                              delete\n                            </button> */}\n                          </div>\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          ))}\n        </DragDropContext>\n      </div>\n    </div>\n  );\n}\n\nexport default TreeList;\n","/Users/sojeong/madCamp_week3/src/route/MyTree.js",[],"/Users/sojeong/madCamp_week3/src/route/Test.js",["162","163","164"],"import React, { Component } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport \"../style/Test.css\"\nconst tree = [\"🍋\", \"🍊\", \"🍈\"];\nconst ground = [\"🎅\", \"👩‍🎤\", \"👼\", \"👩‍🦰\",\"👨‍🦱\", \"👱‍♀️\", \"👨\", \"🧒\"]\n// const extension = [\"👨‍🦱\", \"👱‍♀️\", \"👨\", \"🧒\"]\n// [[\"👨‍🦱\", \"👱‍♀️\", \"👨\", \"🧒\"],\n//  [\"👩‍🦳\", \"👸\", \"🙂\",\"😠\"],\n//  [\"😔\",\"😖\",\"🙁\",\"🤬\"],\n//  [\"🥶\", \"😦\",\"🤢\", \"😈\"]];\n\n// // fake data generator\n// const getItems = (count, offset = 0) =>\n//     Array.from({ length: count }, (v, k) => k).map(k => ({\n//         id: `item-${k + offset}`,\n//         content: `item ${k + offset}`\n//     }));\n// const groundList =(count, offset =0)=> \n// const array\n// (tree.map((items, index) => {\n//     {items.map((subItem, sIndex) =>{\n//         id: `item==${sIndex + offset}`,\n//         content: tree [sIndex + offset] \n//     })}\n// }))\n\n\nconst treeList = (count, offset = 0) =>\n    Array.from({length: count},(v, k) => k).map(k => ({\n        id: `item==${k + offset}`,\n        content: tree [k+ offset] \n    }))\n\nconst groundList = (count, offset = 0) =>\n    Array.from({length: count},(v, k) => k).map(k => ({\n        id: `ite==${k + offset}`,\n        content: ground [k+ offset] \n    }))\n\n// const extensionList = (count, offset = 0) =>\n// Array.from({length: count},(v, k) => k).map(k => ({\n//     id: `ite==${k + offset}`,\n//     content: extension [k+ offset] \n// }))\n\n\n// a little function to help us with reordering the result\n// const reorder = (list, startIndex, endIndex) => {\n//     const result = Array.from(list);\n//     const [removed] = result.splice(startIndex, 1);\n//     result.splice(endIndex, 0, removed);\n\n//     return result;\n// };\n\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n    //source 움직인 쪽의 리스트, destClone 목적지 쪽의 리스트\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    console.log(sourceClone)\n    console.log(destClone)\n\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    //옮겨진 아이템 [removed]\n    console.log([removed])\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n};\n\nconst grid = 20;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid ,\n    margin: `${grid}px ${grid}px ${grid}px ${grid}px`,\n\n    // change background colour if dragging\n    background: isDragging ? 'grey' : 'grey',\n\n    // styles we need to apply on draggables\n    ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n    background: isDraggingOver ? 'lightgrey' : 'lightgrey',\n    padding: grid,\n    width: 250\n});\n\nclass test extends React.Component {\n    state = {\n        items: treeList(3),\n        //selected: extension[4][4]\n        selected: groundList(8),\n        //extension: extensionList(4)\n    };\n\n    id2List = {\n        droppable: 'items',\n        droppable2: 'selected',\n        //droppable3: 'extension'\n\n    };\n\n    getList = id => this.state[this.id2List[id]];\n  \n    onDragEnd = result => {\n        const { source, destination } = result;\n        // dropped outside the list\n        if (!destination) {\n            return;\n        }\n        //자기 자신으로 움직이는 경우 \n        if (source.droppableId === destination.droppableId) {\n            const items = reorder(this.getList(source.droppableId),source.index,destination.index);\n            let state = { items };\n            const newState = [state]\n            newState[source.droppableId] = items;\n            this.setState(newState)\n            \n            //this.setState(state);\n            // //모르겠음\n            // if (source.droppableId === 'droppable2') {\n            //     state = { selected: items };\n            // }\n\n        } else {\n            //움직인 상태 결과 값 \n            const result = move(this.getList(source.droppableId),this.getList(destination.droppableId),source,destination);\n            //this.setState({items: result.droppable, selected: result.droppable2//, extension = result.droppable3\n            const newState = [this.state.selected]\n            newState[source.droppableId] = result[source.droppableId];\n            newState[destination.droppableId] = result[destination.droppableId]\n            this.setState(newState.filter(group => group.length))\n            \n            }\n        }\n    render() {\n        return (\n            <div>\n                <button type = \"button\" onClick ={() => {this.setState([this.state.selected,[]]);}} >add new group</button>\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <div class = \"droppable\">\n                <Droppable droppableId=\"droppable\" direction = \"horizontal\">\n                    {(provided, snapshot) => (\n                        <div \n                            ref={provided.innerRef}\n                            \n                            style={getListStyle(snapshot.isDraggingOver)}>\n                                <p>tree</p>\n                                <div class = \"item\">\n                            {this.state.items.map((item, index) => (\n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}>\n                                    {(provided, snapshot) => (\n                                        <div \n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            \n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            </div>\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n                </div>\n                <div className = \"droppable2\">\n                <Droppable droppableId=\"droppable2\">\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            \n                            style={getListStyle(snapshot.isDraggingOver)}>\n                                <p>garden</p>\n                                <div className = \"item\">\n                            {this.state.selected.map((item, index) => (\n            \n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            \n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            </div>\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n                </div>\n                <div className = \"div2\">\n                {/* <Droppable droppableId=\"droppable3\">\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            style={getListStyle(snapshot.isDraggingOver)}>\n                            {this.state.extension.map((item, index) => (\n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable> */}\n                </div>\n            </DragDropContext>\n            </div>\n        );\n    }\n}\n\n\nexport default test;\n","/Users/sojeong/madCamp_week3/src/route/Dialog.js",["165","166"],"import React, { Component } from 'react';\nimport '../style/Dialog.css';\n\nexport default class Dialog extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            x: 0,\n            y: 0,\n            dragging: false,\n            stylesList: [],\n        }\n\n        this._dragStart = this._dragStart.bind(this);\n        this._dragging = this._dragging.bind(this);\n        this._dragEnd = this._dragEnd.bind(this);\n    }\n\n    _dragStart(e, i) {\n        console.log(\"_dragStart\")\n        this.setState({\n            x: e.screenX - e.currentTarget.getBoundingClientRect().left,\n            y: e.screenY - e.currentTarget.getBoundingClientRect().top,\n            dragging: true\n        });\n    }\n\n    _dragging(e, i) {\n        console.log(\"_dragging\")\n        if (this.state.dragging) {\n            var left = e.screenX - this.state.x;\n            var top = e.screenY - this.state.y;\n            console.log(left, top);\n\n            const stylesList = this.state.stylesList;\n            stylesList[i] = { left: left, top: top };\n            this.setState({\n                stylesList: stylesList\n            });\n        }\n    }\n\n    _dragEnd(e, i) {\n        console.log(\"_dragEnd\")\n        console.log(e)\n\n        this.setState({\n            dragging: false\n        });\n    }\n    \n    render() {\n        const theFlower = localStorage.getItem(\"flowers\");\n        console.log(theFlower);\n        let flowerArray;\n        if(theFlower != null){\n            flowerArray = theFlower.split(\",\");\n            console.log(flowerArray);\n        }else {\n            flowerArray = [];\n        }\n        const LS_KEY_ALL_PLANT = \"all_plant\"\n\n        let all_plant_count;\n        if(flowerArray.length == 0){\n            all_plant_count = 0;\n        }else{\n            all_plant_count = flowerArray.length\n        }\n       \n        localStorage.setItem(LS_KEY_ALL_PLANT, flowerArray.length); \n        return (\n            <div>\n                {flowerArray.map((item, idx) =>\n                    <div className={\"Dialog\"} style={this.state.stylesList[idx]}\n                    onMouseDown={(e) => this._dragStart(e, idx)}\n                    onMouseMove={(e) => this._dragging(e, idx)}\n                    onMouseUp={(e) => this._dragEnd(e, idx)}>\n                        {item}\n                        {/* {this.props.itemFriends.map((item) => <p>{item}</p>)} */}\n                    </div>\n                )}\n\n            \n            </div>\n        );\n    }\n}\n\n\n\n","/Users/sojeong/madCamp_week3/src/Sign/SignUpContainer.js",["167"],"import React, { Component } from \"react\";\nimport SignUpForm from \"./SignUpForm.js\";\nconst axios = require(\"axios\");\nconst FormValidators = require(\"./validate\");\nconst validateSignUpForm = FormValidators.validateSignUpForm;\nconst zxcvbn = require(\"zxcvbn\");\n\n\nclass SignUpContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      errors: {},\n      user: {\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        pwconfirm: \"\"\n      },\n      btnTxt: \"show\",\n      type: \"password\",\n      score: \"0\"\n    };\n\n    this.pwMask = this.pwMask.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.submitSignup = this.submitSignup.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.pwHandleChange = this.pwHandleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const field = event.target.name;\n    const user = this.state.user;\n    user[field] = event.target.value;\n\n    this.setState({\n      user\n    });\n  }\n\n  pwHandleChange(event) {\n    const field = event.target.name;\n    const user = this.state.user;\n    user[field] = event.target.value;\n\n    this.setState({\n      user\n    });\n\n    if (event.target.value === \"\") {\n      this.setState((state) =>\n        Object.assign({}, state, {\n          score: \"null\"\n        })\n      );\n    } else {\n      var pw = zxcvbn(event.target.value);\n      this.setState((state) =>\n        Object.assign({}, state, {\n          score: pw.score + 1\n        })\n      );\n    }\n  }\n\n  submitSignup(user) {\n    var params = { username: user.usr, password: user.pw, email: user.email };\n    axios\n      .post(\"https://ouramazingserver.com/api/signup/submit\", params)\n      .then((res) => {\n        if (res.data.success === true) {\n          localStorage.token = res.data.token;\n          localStorage.isAuthenticated = true;\n          window.location.reload();\n        } else {\n          this.setState({\n            errors: { message: res.data.message }\n          });\n        }\n      })\n      .catch((err) => {\n        console.log(\"Sign up data submit error: \", err);\n      });\n  }\n\n  validateForm(event) {\n    event.preventDefault();\n    var payload = validateSignUpForm(this.state.user);\n    if (payload.success) {\n      this.setState({\n        errors: {}\n      });\n      var user = {\n        usr: this.state.user.username,\n        pw: this.state.user.password,\n        email: this.state.user.email\n      };\n      this.submitSignup(user);\n    }\n     else {\n      const errors = payload.errors;\n      this.setState({\n        errors\n      });\n    }\n  }\n\n  pwMask(event) {\n    event.preventDefault();\n    this.setState((state) =>\n      Object.assign({}, state, {\n        type: this.state.type === \"password\" ? \"input\" : \"password\",\n        btnTxt: this.state.btnTxt === \"show\" ? \"hide\" : \"show\"\n      })\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <SignUpForm onSubmit={this.validateForm} onChange={this.handleChange} onPwChange={this.pwHandleChange} e\n        rrors={this.state.errors} user={this.state.user} score={this.state.score} btnTxt={this.state.btnTxt} type={this.state.type} pwMask={this.pwMask}/>\n      </div>\n    );\n  }\n}\n\nexport default SignUpContainer;\n\n// module.exports = SignUpContainer;\n\n\n","/Users/sojeong/madCamp_week3/src/SidebarData.js",["168","169","170","171"],"import React from 'react';\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport * as IoIcons from 'react-icons/io';\n\nexport const SidebarData = [\n  {\n    title: 'Home',\n    path: '/',\n    // icon: <AiIcons.AiFillHome />,\n    icon: \"🏡\",\n    cName: 'nav-text'\n  },\n  {\n    title: 'Profile',\n    path: '/profile',\n    // icon: <IoIcons.IoIosPaper />,\n    icon: \"👩‍🌾\",\n    cName: 'nav-text'\n  },\n  {\n    title: 'My Garden',\n    path: '/mygarden',\n    // icon: <FaIcons.FaCartPlus />,\n    icon: \"🌱\",\n    cName: 'nav-text'\n  }\n];","/Users/sojeong/madCamp_week3/src/Sign/SignUpForm.js",[],"/Users/sojeong/madCamp_week3/src/Sign/validate.js",[],"/Users/sojeong/madCamp_week3/src/Sign/PasswordStr.js",[],["172","173"],"/Users/sojeong/madCamp_week3/src/Column.jsx",[],"/Users/sojeong/madCamp_week3/src/initial-data.js",[],"/Users/sojeong/madCamp_week3/src/route/DoneDialog.js",[],"/Users/sojeong/madCamp_week3/src/route/Timer.js",[],["174","175"],"/Users/sojeong/madCamp_week3/src/route/SetTimer.js",["176","177","178"],"import { ImageExposureZero } from 'material-ui/svg-icons';\nimport React, { Component } from 'react';\nimport '../style/SetTimer.css';\nimport Home from \"./Home\";\n\nclass SetTimer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hours: 0,\n      minutes: 0,\n      seconds:0,\n      killCout:0\n    }\n    this.hoursInput = React.createRef();\n    this.minutesInput= React.createRef();\n    this.secondsInput = React.createRef();\n  }\n\n  inputHandler = (e) => {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  convertToSeconds = ( hours, minutes, seconds) => {\n    return seconds + minutes * 60 + hours * 60 * 60;\n  }\n\n  startTimer = () => {\n    this.timer = setInterval(this.countDown, 1000);\n    // 인풋에 적은 숫자 지우기\n    const hoursInput = document.querySelector(\"input[name=hours]\");\n    const minutesInput = document.querySelector(\"input[name=minutes]\");\n    const secondsInput = document.querySelector(\"input[name=seconds]\");\n    hoursInput.value=\"\";\n    minutesInput.value=\"\";\n    secondsInput.value=\"\";\n  }\n\n\n  countDown = () => {\n    const  { hours, minutes, seconds } = this.state;\n    let c_seconds = this.convertToSeconds(hours, minutes, seconds);\n    if (!this.props.toDoIsNotEmpty && !this.props.InProgressIsNotEmpty){ // 우선 할일을 다 하게 되면\n      this.stopTimer();\n    } else { // 할일 다 안했으면\n      if ( hours === 0 &&  minutes === 0 & seconds === 0){ // time over\n        this.state.killCout +=1;\n        console.log(this.state.killCout);\n        alert(`시간 내에 할일을 다 못하셨군요... 꽃이 죽었어요ㅠㅠ`)\n      }\n      const LS_KEY_KILL_PLANT = \"kill_plant\"\n      localStorage.setItem(LS_KEY_KILL_PLANT, this.state.killCout);\n    }\n    \n    if(c_seconds) {\n\n      // seconds change\n      seconds ? this.setState({seconds: seconds-1}) : this.setState({seconds: 59});\n\n      // minutes change\n      if(c_seconds % 60 === 0 && minutes) {\n        this.setState({minutes: minutes -1});\n      }\n\n      // when only hours entered\n      if(!minutes && hours) {\n        this.setState({minutes: 59});\n      }\n\n      // hours change\n      if(c_seconds % 3600 === 0 && hours) {\n        this.setState({hours: hours-1});\n      }\n\n    } else {\n      clearInterval(this.timer);\n    } \n  }\n\n  stopTimer = () => {\n    clearInterval(this.timer);\n    const hoursInput = document.querySelector(\"input[name=hours]\");\n    const minutesInput = document.querySelector(\"input[name=minutes]\");\n    const secondsInput = document.querySelector(\"input[name=seconds]\");\n    hoursInput.value=\"\";\n    minutesInput.value=\"\";\n    secondsInput.value=\"\";\n  }\n\n  resetTimer = () => {\n    this.setState({\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    });\n    this.hoursInput.current.value = \"\";\n    this.minutesInput.current.value = \"\";\n    this.secondsInput.current.value = \"\";\n  }\n\n\n  render() {\n    const { hours, minutes, seconds } = this.state;\n\n    return (\n      <div className=\"SetTimer\">\n        <h1>TIMER</h1>\n\n        <div>\n          <input ref={this.hoursInput} type=\"number\" className=\"form-control input-lg\" placeholder={\"시를 입력하세요\"} name=\"hours\" onChange={this.inputHandler} />\n          <input ref={this.minutesInput} type=\"number\" className=\"form-control input-lg\" placeholder={\"분을 입력하세요\"} name=\"minutes\" onChange={this.inputHandler} />\n          <input ref={this.secondsInput} type=\"number\" className=\"form-control input-lg\" placeholder={\"초를 입력하세요\"} name=\"seconds\" onChange={this.inputHandler} />\n        </div>\n        \n         <div>\n            <button onClick={this.startTimer} className=\"startBtn\">START</button>\n            <button onClick={this.stopTimer}  className=\"stopBtn\">STOP</button>\n            <button onClick={this.resetTimer}  className=\"resetBtn\">RESET</button>\n         </div>\n\n         <h3 className=\"timer-settimer\">남은 시간</h3>\n         <h2>{hours<10? `0${hours}` : hours} : {minutes<10? `0${minutes}` : minutes} : {seconds<10? `0${seconds}` : seconds}</h2>\n      </div>\n\n    );\n  }\n}\n\nexport default SetTimer;","/Users/sojeong/madCamp_week3/src/Task.jsx",[],{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","severity":1,"message":"184","line":6,"column":8,"nodeType":"185","messageId":"186","endLine":6,"endColumn":15},{"ruleId":"183","severity":1,"message":"187","line":10,"column":8,"nodeType":"185","messageId":"186","endLine":10,"endColumn":13},{"ruleId":"183","severity":1,"message":"188","line":11,"column":8,"nodeType":"185","messageId":"186","endLine":11,"endColumn":12},{"ruleId":"183","severity":1,"message":"189","line":1,"column":16,"nodeType":"185","messageId":"186","endLine":1,"endColumn":20},{"ruleId":"183","severity":1,"message":"190","line":2,"column":9,"nodeType":"185","messageId":"186","endLine":2,"endColumn":12},{"ruleId":"183","severity":1,"message":"191","line":2,"column":14,"nodeType":"185","messageId":"186","endLine":2,"endColumn":17},{"ruleId":"183","severity":1,"message":"192","line":2,"column":19,"nodeType":"185","messageId":"186","endLine":2,"endColumn":28},{"ruleId":"193","severity":1,"message":"194","line":20,"column":4,"nodeType":"195","endLine":20,"endColumn":28},{"ruleId":"196","severity":1,"message":"197","line":11,"column":14,"nodeType":"198","messageId":"199","endLine":11,"endColumn":30,"fix":"200"},{"ruleId":"183","severity":1,"message":"188","line":3,"column":8,"nodeType":"185","messageId":"186","endLine":3,"endColumn":12},{"ruleId":"183","severity":1,"message":"201","line":4,"column":8,"nodeType":"185","messageId":"186","endLine":4,"endColumn":16},{"ruleId":"183","severity":1,"message":"202","line":5,"column":8,"nodeType":"185","messageId":"186","endLine":5,"endColumn":12},{"ruleId":"183","severity":1,"message":"203","line":6,"column":8,"nodeType":"185","messageId":"186","endLine":6,"endColumn":12},{"ruleId":"183","severity":1,"message":"204","line":7,"column":8,"nodeType":"185","messageId":"186","endLine":7,"endColumn":14},{"ruleId":"183","severity":1,"message":"205","line":8,"column":8,"nodeType":"185","messageId":"186","endLine":8,"endColumn":13},{"ruleId":"183","severity":1,"message":"206","line":9,"column":10,"nodeType":"185","messageId":"186","endLine":9,"endColumn":16},{"ruleId":"183","severity":1,"message":"207","line":11,"column":8,"nodeType":"185","messageId":"186","endLine":11,"endColumn":14},{"ruleId":"183","severity":1,"message":"208","line":1,"column":16,"nodeType":"185","messageId":"186","endLine":1,"endColumn":25},{"ruleId":"183","severity":1,"message":"209","line":2,"column":8,"nodeType":"185","messageId":"186","endLine":2,"endColumn":16},{"ruleId":"183","severity":1,"message":"210","line":3,"column":8,"nodeType":"185","messageId":"186","endLine":3,"endColumn":13},{"ruleId":"183","severity":1,"message":"211","line":4,"column":8,"nodeType":"185","messageId":"186","endLine":4,"endColumn":13},{"ruleId":"183","severity":1,"message":"206","line":5,"column":10,"nodeType":"185","messageId":"186","endLine":5,"endColumn":16},{"ruleId":"183","severity":1,"message":"212","line":1,"column":17,"nodeType":"185","messageId":"186","endLine":1,"endColumn":25},{"ruleId":"183","severity":1,"message":"213","line":8,"column":8,"nodeType":"185","messageId":"186","endLine":8,"endColumn":14},{"ruleId":"183","severity":1,"message":"214","line":10,"column":8,"nodeType":"185","messageId":"186","endLine":10,"endColumn":12},{"ruleId":"183","severity":1,"message":"215","line":11,"column":10,"nodeType":"185","messageId":"186","endLine":11,"endColumn":35},{"ruleId":"183","severity":1,"message":"216","line":54,"column":13,"nodeType":"185","messageId":"186","endLine":54,"endColumn":17},{"ruleId":"217","severity":1,"message":"218","line":55,"column":7,"nodeType":"198","endLine":55,"endColumn":36},{"ruleId":"193","severity":1,"message":"194","line":210,"column":11,"nodeType":"195","endLine":210,"endColumn":70},{"ruleId":"183","severity":1,"message":"212","line":1,"column":16,"nodeType":"185","messageId":"186","endLine":1,"endColumn":24},{"ruleId":"193","severity":1,"message":"194","line":6,"column":9,"nodeType":"195","endLine":6,"endColumn":48},{"ruleId":"219","severity":1,"message":"220","line":71,"column":9,"nodeType":"221","messageId":"222","endLine":71,"endColumn":101},{"ruleId":"183","severity":1,"message":"209","line":2,"column":8,"nodeType":"185","messageId":"186","endLine":2,"endColumn":16},{"ruleId":"196","severity":1,"message":"197","line":12,"column":14,"nodeType":"198","messageId":"199","endLine":12,"endColumn":30,"fix":"223"},{"ruleId":"183","severity":1,"message":"208","line":1,"column":17,"nodeType":"185","messageId":"186","endLine":1,"endColumn":26},{"ruleId":"196","severity":1,"message":"197","line":31,"column":18,"nodeType":"198","messageId":"199","endLine":31,"endColumn":34,"fix":"224"},{"ruleId":"196","severity":1,"message":"197","line":37,"column":18,"nodeType":"198","messageId":"199","endLine":37,"endColumn":36,"fix":"225"},{"ruleId":"226","severity":1,"message":"227","line":65,"column":31,"nodeType":"228","messageId":"229","endLine":65,"endColumn":33},{"ruleId":"183","severity":1,"message":"230","line":68,"column":13,"nodeType":"185","messageId":"186","endLine":68,"endColumn":28},{"ruleId":"183","severity":1,"message":"208","line":1,"column":17,"nodeType":"185","messageId":"186","endLine":1,"endColumn":26},{"ruleId":"183","severity":1,"message":"231","line":1,"column":8,"nodeType":"185","messageId":"186","endLine":1,"endColumn":13},{"ruleId":"183","severity":1,"message":"232","line":2,"column":13,"nodeType":"185","messageId":"186","endLine":2,"endColumn":20},{"ruleId":"183","severity":1,"message":"233","line":3,"column":13,"nodeType":"185","messageId":"186","endLine":3,"endColumn":20},{"ruleId":"183","severity":1,"message":"234","line":4,"column":13,"nodeType":"185","messageId":"186","endLine":4,"endColumn":20},{"ruleId":"179","replacedBy":"235"},{"ruleId":"181","replacedBy":"236"},{"ruleId":"179","replacedBy":"237"},{"ruleId":"181","replacedBy":"238"},{"ruleId":"183","severity":1,"message":"239","line":1,"column":10,"nodeType":"185","messageId":"186","endLine":1,"endColumn":27},{"ruleId":"183","severity":1,"message":"240","line":4,"column":8,"nodeType":"185","messageId":"186","endLine":4,"endColumn":12},{"ruleId":"217","severity":1,"message":"218","line":47,"column":9,"nodeType":"198","endLine":47,"endColumn":19},"no-native-reassign",["241"],"no-negated-in-lhs",["242"],"no-unused-vars","'Profile' is defined but never used.","Identifier","unusedVar","'Timer' is defined but never used.","'Grid' is defined but never used.","'Text' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Container' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-whitespace-before-property","Unexpected whitespace before property k+ offset.","MemberExpression","unexpectedWhitespace",{"range":"243","text":"244"},"'TreeList' is defined but never used.","'Test' is defined but never used.","'Tree' is defined but never used.","'Ground' is defined but never used.","'grass' is defined but never used.","'Button' is defined but never used.","'MyTree' is defined but never used.","'Component' is defined but never used.","'ReactDOM' is defined but never used.","'Popup' is defined but never used.","'Modal' is defined but never used.","'useState' is defined but never used.","'Dialog' is defined but never used.","'Fade' is defined but never used.","'CommunicationSpeakerPhone' is defined but never used.","'item' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock",{"range":"245","text":"244"},{"range":"246","text":"244"},{"range":"247","text":"244"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'all_plant_count' is assigned a value but never used.","'React' is defined but never used.","'FaIcons' is defined but never used.","'AiIcons' is defined but never used.","'IoIcons' is defined but never used.",["241"],["242"],["241"],["242"],"'ImageExposureZero' is defined but never used.","'Home' is defined but never used.","no-global-assign","no-unsafe-negation",[477,478],"",[435,436],[1043,1044],[1221,1222]]