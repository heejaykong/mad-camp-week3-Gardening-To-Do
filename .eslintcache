[{"/Users/sojeong/madCamp_week3/src/index.js":"1","/Users/sojeong/madCamp_week3/src/App.js":"2","/Users/sojeong/madCamp_week3/src/Navbar.js":"3","/Users/sojeong/madCamp_week3/src/route/MyGarden.js":"4","/Users/sojeong/madCamp_week3/src/route/Profile.js":"5","/Users/sojeong/madCamp_week3/src/route/TreeColumn.js":"6","/Users/sojeong/madCamp_week3/src/route/Home.js":"7","/Users/sojeong/madCamp_week3/src/route/Grid.js":"8","/Users/sojeong/madCamp_week3/src/route/MyProfile.js":"9","/Users/sojeong/madCamp_week3/src/Sign/SignUp.js":"10","/Users/sojeong/madCamp_week3/src/route/Login.js":"11","/Users/sojeong/madCamp_week3/src/Column.jsx":"12","/Users/sojeong/madCamp_week3/src/SidebarData.js":"13","/Users/sojeong/madCamp_week3/src/route/TreeList.js":"14","/Users/sojeong/madCamp_week3/src/route/Dialog.js":"15","/Users/sojeong/madCamp_week3/src/route/Test.js":"16","/Users/sojeong/madCamp_week3/src/route/DoneDialog.js":"17","/Users/sojeong/madCamp_week3/src/initial-data.js":"18","/Users/sojeong/madCamp_week3/src/route/Tree.js":"19","/Users/sojeong/madCamp_week3/src/Sign/SignUpContainer.js":"20","/Users/sojeong/madCamp_week3/src/route/SetTimer.js":"21","/Users/sojeong/madCamp_week3/src/route/Timer.js":"22","/Users/sojeong/madCamp_week3/src/Task.jsx":"23","/Users/sojeong/madCamp_week3/src/Sign/SignUpForm.js":"24","/Users/sojeong/madCamp_week3/src/Sign/validate.js":"25","/Users/sojeong/madCamp_week3/src/Sign/PasswordStr.js":"26","/Users/sojeong/madCamp_week3/src/route/MyTree.js":"27"},{"size":179,"mtime":1611031437205,"results":"28","hashOfConfig":"29"},{"size":883,"mtime":1611040849705,"results":"30","hashOfConfig":"29"},{"size":1502,"mtime":1611031437203,"results":"31","hashOfConfig":"29"},{"size":1851,"mtime":1611039906097,"results":"32","hashOfConfig":"29"},{"size":741,"mtime":1611031437208,"results":"33","hashOfConfig":"29"},{"size":1473,"mtime":1611031437209,"results":"34","hashOfConfig":"29"},{"size":6177,"mtime":1611043089231,"results":"35","hashOfConfig":"29"},{"size":4184,"mtime":1611031437207,"results":"36","hashOfConfig":"29"},{"size":4314,"mtime":1611031437208,"results":"37","hashOfConfig":"29"},{"size":610,"mtime":1611031437204,"results":"38","hashOfConfig":"29"},{"size":2952,"mtime":1611031437207,"results":"39","hashOfConfig":"29"},{"size":2333,"mtime":1611031437191,"results":"40","hashOfConfig":"29"},{"size":577,"mtime":1611031437203,"results":"41","hashOfConfig":"29"},{"size":5105,"mtime":1611031437209,"results":"42","hashOfConfig":"29"},{"size":1976,"mtime":1611039779988,"results":"43","hashOfConfig":"29"},{"size":10321,"mtime":1611031437208,"results":"44","hashOfConfig":"29"},{"size":1881,"mtime":1611031437206,"results":"45","hashOfConfig":"29"},{"size":1102,"mtime":1611031437205,"results":"46","hashOfConfig":"29"},{"size":90,"mtime":1611031437209,"results":"47","hashOfConfig":"29"},{"size":3498,"mtime":1611031437204,"results":"48","hashOfConfig":"29"},{"size":3107,"mtime":1611041324285,"results":"49","hashOfConfig":"29"},{"size":2749,"mtime":1611040112237,"results":"50","hashOfConfig":"29"},{"size":3180,"mtime":1611031437205,"results":"51","hashOfConfig":"29"},{"size":1989,"mtime":1611031437205,"results":"52","hashOfConfig":"29"},{"size":2054,"mtime":1611031437205,"results":"53","hashOfConfig":"29"},{"size":798,"mtime":1611031437204,"results":"54","hashOfConfig":"29"},{"size":1100,"mtime":1611037220322,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"16g871s",{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"74","usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"90","usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"95","usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"/Users/sojeong/madCamp_week3/src/index.js",[],["120","121"],"/Users/sojeong/madCamp_week3/src/App.js",["122","123","124"],"/Users/sojeong/madCamp_week3/src/Navbar.js",[],"/Users/sojeong/madCamp_week3/src/route/MyGarden.js",["125","126","127","128","129","130","131","132"],"/Users/sojeong/madCamp_week3/src/route/Profile.js",["133","134","135","136","137"],"import React, {Text} from \"react\";\nimport {Row, Col, Container} from \"react-bootstrap\"\nimport img_woman from '../Image/woman.png';\n// import \"../style/Profile.css\"\nimport '../style/MyProfile.css';\nclass Profile extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t  nickname: \"sojeong\",\n\t\t  password:\"1234\",\n\t\t  lifeCount:\"10\",\n\t\t  killCount:\"2\"\n\t\t  }  \n\t\t};\n\trender(){\n\treturn (\n\t\t<div className='Profile'>\n\t\t\t{/* <motion.div animate = {{scale:0.5}}/> */}\n\t\t\t<img src = {img_woman}/>\n\t\t\t<p>name : {this.state.nickname}</p>\n\t\t\t<p>PassWord : {this.state.password}</p>\n\t\t\t<p>plant count : {this.state.lifeCount}</p>\n\t\t\t<p>dead plant count : {this.state.killCount}</p>\n\n\t\t</div>\n\n\t);\n\t}\n}\n\n\nexport default Profile;","/Users/sojeong/madCamp_week3/src/route/TreeColumn.js",[],"/Users/sojeong/madCamp_week3/src/route/Home.js",["138","139","140","141","142"],"/Users/sojeong/madCamp_week3/src/route/Grid.js",["143"],"import React, { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"../style/grid.css\"\nconst tree = [\"🍋\", \"🍊\", \"🍈\", \"👩‍🦰\", \"👨‍🦱\", \"👱‍♀️\", \"👨\", \"🧒\", \"👩‍🦳\", \"👸\"];\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    //id: tree [k+ offset],//-new Date().getTime(),\n    id:  `item-${k + offset}-${new Date().getTime()}`,\n    content: tree [k+ offset] \n    //content: `item ${k + offset}`\n  }));\n\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250\n});\n\nfunction Grid (){\n  const [state, setState] = useState([getItems(3)])\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     items: getItems(10)\n  //   };\n  //   this.onDragEnd = this.onDragEnd.bind(this);\n  // }\nfunction onDragEnd(result) {\n    const { source, destination } = result;\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    const sInd = +source.droppableId;\n    const dInd = +destination.droppableId;\n    if (sInd === dInd) {\n      const items = reorder(state[sInd], source.index, destination.index);\n      const newState = [...state];\n      newState[sInd] = items;\n      setState(newState);\n    } else {\n      const result = move(state[sInd], state[dInd], source, destination);\n      const newState = [...state];\n      newState[sInd] = result[sInd];\n      newState[dInd] = result[dInd];\n\n      setState(newState.filter(group => group.length));\n    }\n    // const items = reorder(\n    //   this.state.items,\n    //   result.source.index,\n    //   result.destination.index\n    // );\n\n    // this.setState({\n    //   items\n    // });\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n\n    return (\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"droppable\">\n          {(provided, snapshot) => (\n            <div className = \"grid\"\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n            >\n              {this.state.items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  \n}\n\nexport default Grid;\n","/Users/sojeong/madCamp_week3/src/route/MyProfile.js",["144"],"import React from \"react\";\nimport '../style/MyProfile.css';\nconst ImgUpload =({onChange,src})=>\n<label htmlFor=\"photo-upload\" className=\"custom-file-upload fas\">\n      <div className=\"img-wrap img-upload\" >\n        <img htmlFor=\"photo-upload\" src={src}/>\n      </div>\n      <input id=\"photo-upload\" type=\"file\" onChange={onChange}/> \n    </label>\n  \n  \n  const Name =({onChange,value})=>\n    <div className=\"field\">\n      <label htmlFor=\"name\"> name: </label>\n      <input id=\"name\" type=\"text\" onChange={onChange} maxLength=\"25\"  required/>\n    </div>\n  \n    \n  const Status =({onChange, valueColumncar})=>\n    <div className=\"field\">\n      <label htmlFor=\"status\">PASSWORD:</label>\n      <input id=\"status\" type=\"text\" onChange={onChange}  maxLength=\"35\"  required/>\n    </div>\n\n  const KillCount =({onChange,valueColumncar})=>\n    <div className=\"field\">\n      <label htmlFor=\"killcount\">Kill Count </label>\n      <input id=\"killcount\" type=\"text\" onChange={onChange}  maxLength=\"35\"  required/>\n    </div>\n\n    const AllPlant =({onChange,valueColumncar})=>\n      <div className=\"field\">\n        <label htmlFor=\"AllPlant\"> All plant:</label>\n        <input  id=\"AllPlant\"  type=\"text\"   onChange={onChange} maxLength=\"35\"   required/>\n      </div>\n  \n  \n  const Profile =({\n    onSubmit,\n    src,\n    name,\n    status,\n    KillCount,\n    AllPlant\n  })=>\n    <div className=\"card\">\n      <form onSubmit={onSubmit}>\n        <label className=\"custom-file-upload fas\">\n          {/* <div className=\"img-wrap\" >\n            <img for=\"photo-upload\" src={src}/>\n          </div> */}\n        </label>\n        <div className=\"name\">{name}</div>\n        <div className=\"status\">{status}</div>\n        <div className=\"KillCount\">{KillCount}</div>\n        <div className=\"AllPlant\">{AllPlant}</div>\n        <button type=\"submit\" className=\"edit\">Edit Profile </button>\n      </form>\n    </div>\n       \n        \n  const Edit =({\n    onSubmit,\n    children,\n  })=>\n    <div className=\"card\">\n      <form onSubmit={onSubmit}>\n          {children}\n        <button type=\"submit\" className=\"save\">Save </button>\n      </form>\n    </div>\n  \n  class MyProfile extends React.Component {\n    state = {\n      file: '',\n      imagePreviewUrl: 'https://github.com/OlgaKoplik/CodePen/blob/master/profile.jpg?raw=true',\n      name:'',\n      status:'',\n      KillCount:'',\n      AllPlant:'',\n      active: 'edit'\n    }\n  \n    photoUpload = e =>{\n      e.preventDefault();\n      const reader = new FileReader();\n      const file = e.target.files[0];\n      reader.onloadend = () => {\n        this.setState({\n          file: file,\n          imagePreviewUrl: reader.result\n        });\n      }\n      reader.readAsDataURL(file);\n    }\n    editName = e =>{\n      const name = e.target.value;\n      this.setState({\n        name,\n      });\n    }\n    \n    editStatus = e => {\n      const status = e.target.value;\n      this.setState({\n        status,\n      });\n    }\n    editKillCount = e => {\n      const KillCount = e.target.value;\n      this.setState({\n        KillCount,\n      });\n    }\n    editAllPlant = e => {\n      const AllPlant = e.target.value;\n      this.setState({\n        AllPlant,\n      });\n    }\n    \n    handleSubmit= e =>{\n      e.preventDefault();\n      let activeP = this.state.active === 'edit' ? 'profile' : 'edit';\n      this.setState({\n        active: activeP,\n      })\n    }\n    \n    render() {\n      const {imagePreviewUrl, \n             name, \n             status, killCount, allPlant,\n             active} = this.state;\n      return (\n        <div>\n          {(active === 'edit')?(\n            <Edit onSubmit={this.handleSubmit}>\n              <ImgUpload onChange={this.photoUpload} src={imagePreviewUrl}/>\n              <Name onChange={this.editName} value={name}/>\n              <Status onChange={this.editStatus} value={status}/>\n              <KillCount onChange={this.editKillCount} value={killCount}/>\n              <AllPlant onChange={this.editAllPlant} value={allPlant}/>\n            </Edit>\n          ):(\n            <Profile \n              onSubmit={this.handleSubmit} \n              src={imagePreviewUrl} \n              name={name} \n              status={status}\n              KillCount={KillCount}\n              AppPlant={AllPlant}/>)}\n          \n        </div>\n      )\n    }\n  }\n  \n export default MyProfile;","/Users/sojeong/madCamp_week3/src/Sign/SignUp.js",["145","146","147","148","149"],"import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport Popup from 'reactjs-popup'\nimport Modal from 'react-modal'\nimport { Button } from 'reactstrap';\nimport SignUpContainer from \"./SignUpContainer\";\nimport MuiThemeProvider from \"material-ui/styles/MuiThemeProvider\";\n\nclass SignUp extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {name: \"hello\"};\n    }\n\n    render(){\n    return (\n        <MuiThemeProvider>\n            {this.props.children}\n            <SignUpContainer/>\n        </MuiThemeProvider>\n    );\n    }\n}\n\nexport default SignUp;","/Users/sojeong/madCamp_week3/src/route/Login.js",[],"/Users/sojeong/madCamp_week3/src/Column.jsx",[],"/Users/sojeong/madCamp_week3/src/SidebarData.js",["150","151","152","153"],"import React from 'react';\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport * as IoIcons from 'react-icons/io';\n\nexport const SidebarData = [\n  {\n    title: 'Home',\n    path: '/',\n    // icon: <AiIcons.AiFillHome />,\n    icon: \"🏡\",\n    cName: 'nav-text'\n  },\n  {\n    title: 'Profile',\n    path: '/profile',\n    // icon: <IoIcons.IoIosPaper />,\n    icon: \"👩‍🌾\",\n    cName: 'nav-text'\n  },\n  {\n    title: 'My Garden',\n    path: '/mygarden',\n    // icon: <FaIcons.FaCartPlus />,\n    icon: \"🌱\",\n    cName: 'nav-text'\n  }\n];","/Users/sojeong/madCamp_week3/src/route/TreeList.js",["154","155"],"import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nconst tree = [\"🍋\", \"🍊\", \"🍈\"];\n// fake data generator\nconst getItems = (count, offset = 0) =>\n    \n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    //id: tree [k+ offset],//-new Date().getTime(),\n    id:  `item-${k + offset}-${new Date().getTime()}`,\n    content: tree [k+ offset] \n    //content: `item ${k + offset}`\n  }));\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250\n});\n\nfunction TreeList() {\n  const [state, setState] = useState([getItems(3)])\n  //= useState([getItems(3), getItems(5, 10)]);\n\n  function onDragEnd(result) {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n    const sInd = +source.droppableId;\n    const dInd = +destination.droppableId;\n\n    if (sInd === dInd) {\n      const items = reorder(state[sInd], source.index, destination.index);\n      const newState = [...state];\n      newState[sInd] = items;\n      setState(newState);\n    } else {\n      const result = move(state[sInd], state[dInd], source, destination);\n      const newState = [...state];\n      newState[sInd] = result[sInd];\n      newState[dInd] = result[dInd];\n\n      setState(newState.filter(group => group.length));\n    }\n  }\n\n  return (\n    <div>\n       {/* <button\n        type=\"button\"\n        onClick={() => {\n          setState([...state, []]);\n        }}\n      >\n        Add new group\n      </button> \n      <button\n        type=\"button\"\n        onClick={() => {\n          setState([...state, getItems(1)]);\n        }}\n      >\n        Add new item\n      </button>  */}\n      <div style={{ display: \"flex\" }}>\n        <DragDropContext onDragEnd={onDragEnd}>\n          {state.map((el, ind) => (\n            <Droppable key={ind} droppableId={`${ind}`}>\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                  {...provided.droppableProps}\n                >\n                  {el.map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id}\n                      index={index}\n                    >\n                      {(provided, snapshot) => (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          )}\n                        >\n                          <div\n                            style={{\n                              display: \"flex\",\n                              justifyContent: \"space-around\"\n                            }}\n                          >\n                            {item.content}\n                            {/* <button\n                              type=\"button\"\n                              onClick={() => {\n                                const newState = [...state];\n                                newState[ind].splice(index, 1);\n                                setState(\n                                  newState.filter(group => group.length)\n                                );\n                              }}\n                            >\n                              delete\n                            </button> */}\n                          </div>\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          ))}\n        </DragDropContext>\n      </div>\n    </div>\n  );\n}\n\nexport default TreeList;\n","/Users/sojeong/madCamp_week3/src/route/Dialog.js",[],"/Users/sojeong/madCamp_week3/src/route/Test.js",["156","157","158"],"import React, { Component } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport \"../style/Test.css\"\nconst tree = [\"🍋\", \"🍊\", \"🍈\"];\nconst ground = [\"🎅\", \"👩‍🎤\", \"👼\", \"👩‍🦰\",\"👨‍🦱\", \"👱‍♀️\", \"👨\", \"🧒\"]\n// const extension = [\"👨‍🦱\", \"👱‍♀️\", \"👨\", \"🧒\"]\n// [[\"👨‍🦱\", \"👱‍♀️\", \"👨\", \"🧒\"],\n//  [\"👩‍🦳\", \"👸\", \"🙂\",\"😠\"],\n//  [\"😔\",\"😖\",\"🙁\",\"🤬\"],\n//  [\"🥶\", \"😦\",\"🤢\", \"😈\"]];\n\n// // fake data generator\n// const getItems = (count, offset = 0) =>\n//     Array.from({ length: count }, (v, k) => k).map(k => ({\n//         id: `item-${k + offset}`,\n//         content: `item ${k + offset}`\n//     }));\n// const groundList =(count, offset =0)=> \n// const array\n// (tree.map((items, index) => {\n//     {items.map((subItem, sIndex) =>{\n//         id: `item==${sIndex + offset}`,\n//         content: tree [sIndex + offset] \n//     })}\n// }))\n\n\nconst treeList = (count, offset = 0) =>\n    Array.from({length: count},(v, k) => k).map(k => ({\n        id: `item==${k + offset}`,\n        content: tree [k+ offset] \n    }))\n\nconst groundList = (count, offset = 0) =>\n    Array.from({length: count},(v, k) => k).map(k => ({\n        id: `ite==${k + offset}`,\n        content: ground [k+ offset] \n    }))\n\n// const extensionList = (count, offset = 0) =>\n// Array.from({length: count},(v, k) => k).map(k => ({\n//     id: `ite==${k + offset}`,\n//     content: extension [k+ offset] \n// }))\n\n\n// a little function to help us with reordering the result\n// const reorder = (list, startIndex, endIndex) => {\n//     const result = Array.from(list);\n//     const [removed] = result.splice(startIndex, 1);\n//     result.splice(endIndex, 0, removed);\n\n//     return result;\n// };\n\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n    //source 움직인 쪽의 리스트, destClone 목적지 쪽의 리스트\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    console.log(sourceClone)\n    console.log(destClone)\n\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    //옮겨진 아이템 [removed]\n    console.log([removed])\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n};\n\nconst grid = 20;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid ,\n    margin: `${grid}px ${grid}px ${grid}px ${grid}px`,\n\n    // change background colour if dragging\n    background: isDragging ? 'grey' : 'grey',\n\n    // styles we need to apply on draggables\n    ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n    background: isDraggingOver ? 'lightgrey' : 'lightgrey',\n    padding: grid,\n    width: 250\n});\n\nclass test extends React.Component {\n    state = {\n        items: treeList(3),\n        //selected: extension[4][4]\n        selected: groundList(8),\n        //extension: extensionList(4)\n    };\n\n    id2List = {\n        droppable: 'items',\n        droppable2: 'selected',\n        //droppable3: 'extension'\n\n    };\n\n    getList = id => this.state[this.id2List[id]];\n  \n    onDragEnd = result => {\n        const { source, destination } = result;\n        // dropped outside the list\n        if (!destination) {\n            return;\n        }\n        //자기 자신으로 움직이는 경우 \n        if (source.droppableId === destination.droppableId) {\n            const items = reorder(this.getList(source.droppableId),source.index,destination.index);\n            let state = { items };\n            const newState = [state]\n            newState[source.droppableId] = items;\n            this.setState(newState)\n            \n            //this.setState(state);\n            // //모르겠음\n            // if (source.droppableId === 'droppable2') {\n            //     state = { selected: items };\n            // }\n\n        } else {\n            //움직인 상태 결과 값 \n            const result = move(this.getList(source.droppableId),this.getList(destination.droppableId),source,destination);\n            //this.setState({items: result.droppable, selected: result.droppable2//, extension = result.droppable3\n            const newState = [this.state.selected]\n            newState[source.droppableId] = result[source.droppableId];\n            newState[destination.droppableId] = result[destination.droppableId]\n            this.setState(newState.filter(group => group.length))\n            \n            }\n        }\n    render() {\n        return (\n            <div>\n                <button type = \"button\" onClick ={() => {this.setState([this.state.selected,[]]);}} >add new group</button>\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <div class = \"droppable\">\n                <Droppable droppableId=\"droppable\" direction = \"horizontal\">\n                    {(provided, snapshot) => (\n                        <div \n                            ref={provided.innerRef}\n                            \n                            style={getListStyle(snapshot.isDraggingOver)}>\n                                <p>tree</p>\n                                <div class = \"item\">\n                            {this.state.items.map((item, index) => (\n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}>\n                                    {(provided, snapshot) => (\n                                        <div \n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            \n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            </div>\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n                </div>\n                <div className = \"droppable2\">\n                <Droppable droppableId=\"droppable2\">\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            \n                            style={getListStyle(snapshot.isDraggingOver)}>\n                                <p>garden</p>\n                                <div className = \"item\">\n                            {this.state.selected.map((item, index) => (\n            \n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            \n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            </div>\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n                </div>\n                <div className = \"div2\">\n                {/* <Droppable droppableId=\"droppable3\">\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            style={getListStyle(snapshot.isDraggingOver)}>\n                            {this.state.extension.map((item, index) => (\n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable> */}\n                </div>\n            </DragDropContext>\n            </div>\n        );\n    }\n}\n\n\nexport default test;\n","/Users/sojeong/madCamp_week3/src/route/DoneDialog.js",[],"/Users/sojeong/madCamp_week3/src/initial-data.js",[],"/Users/sojeong/madCamp_week3/src/route/Tree.js",[],"/Users/sojeong/madCamp_week3/src/Sign/SignUpContainer.js",["159"],"import React, { Component } from \"react\";\nimport SignUpForm from \"./SignUpForm.js\";\nconst axios = require(\"axios\");\nconst FormValidators = require(\"./validate\");\nconst validateSignUpForm = FormValidators.validateSignUpForm;\nconst zxcvbn = require(\"zxcvbn\");\n\n\nclass SignUpContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      errors: {},\n      user: {\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        pwconfirm: \"\"\n      },\n      btnTxt: \"show\",\n      type: \"password\",\n      score: \"0\"\n    };\n\n    this.pwMask = this.pwMask.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.submitSignup = this.submitSignup.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.pwHandleChange = this.pwHandleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const field = event.target.name;\n    const user = this.state.user;\n    user[field] = event.target.value;\n\n    this.setState({\n      user\n    });\n  }\n\n  pwHandleChange(event) {\n    const field = event.target.name;\n    const user = this.state.user;\n    user[field] = event.target.value;\n\n    this.setState({\n      user\n    });\n\n    if (event.target.value === \"\") {\n      this.setState((state) =>\n        Object.assign({}, state, {\n          score: \"null\"\n        })\n      );\n    } else {\n      var pw = zxcvbn(event.target.value);\n      this.setState((state) =>\n        Object.assign({}, state, {\n          score: pw.score + 1\n        })\n      );\n    }\n  }\n\n  submitSignup(user) {\n    var params = { username: user.usr, password: user.pw, email: user.email };\n    axios\n      .post(\"https://ouramazingserver.com/api/signup/submit\", params)\n      .then((res) => {\n        if (res.data.success === true) {\n          localStorage.token = res.data.token;\n          localStorage.isAuthenticated = true;\n          window.location.reload();\n        } else {\n          this.setState({\n            errors: { message: res.data.message }\n          });\n        }\n      })\n      .catch((err) => {\n        console.log(\"Sign up data submit error: \", err);\n      });\n  }\n\n  validateForm(event) {\n    event.preventDefault();\n    var payload = validateSignUpForm(this.state.user);\n    if (payload.success) {\n      this.setState({\n        errors: {}\n      });\n      var user = {\n        usr: this.state.user.username,\n        pw: this.state.user.password,\n        email: this.state.user.email\n      };\n      console.log(\"ok\")\n      console.log(this.state.user.username);\n      console.log(this.state.user.password);\n      console.log(this.state.user.email);\n      this.submitSignup(user);\n    }\n     else {\n      const errors = payload.errors;\n      this.setState({\n        errors\n      });\n    }\n  }\n\n  pwMask(event) {\n    event.preventDefault();\n    this.setState((state) =>\n      Object.assign({}, state, {\n        type: this.state.type === \"password\" ? \"input\" : \"password\",\n        btnTxt: this.state.btnTxt === \"show\" ? \"hide\" : \"show\"\n      })\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <SignUpForm\n          onSubmit={this.validateForm}\n          onChange={this.handleChange}\n          onPwChange={this.pwHandleChange}\n          errors={this.state.errors}\n          user={this.state.user}\n          score={this.state.score}\n          btnTxt={this.state.btnTxt}\n          type={this.state.type}\n          pwMask={this.pwMask}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SignUpContainer;\n\n// module.exports = SignUpContainer;\n\n\n","/Users/sojeong/madCamp_week3/src/route/SetTimer.js",["160","161"],"/Users/sojeong/madCamp_week3/src/route/Timer.js",[],"/Users/sojeong/madCamp_week3/src/Task.jsx",["162"],"\n\n// // function toggleInput(){\n// // \tconst toggle = false;\n// // }\n\n// // function handleChange(e){\n// // \t// this.text = e.toggle.value\n// // \tconst text = e.target.value\n// // \t//setText(e.target.value);\n// // }\n\n// // export default class Task extends React.Component {\n// \tfunction Task(){\n// \t\tconst [toggle, setToggle] = useState(true);\n// \t\tconst [text, setText] = useState(\"really\");\n// \t\tfunction toggleInput(){\n// \t\t\tsetToggle(false);\n// \t\t}\n// \t\tfunction handleChange(e) {\n// \t\t\tsetText(e.target.value);\n// \t\t}\n// \t\tconst isDragDisabled = this.props.task.isDone === true;\n// \t// render(){\n\n// \t\t//setText(this.props.task.content)\n// \t\treturn (\n// \t\t\t<div className = \"Task\">\n// \t\t\t<Draggable\n// \t\t\t\tdraggableId={this.props.task.id}\n// \t\t\t\tindex={this.props.index}\n// \t\t\t\tisDragDisabled={isDragDisabled}\n// \t\t\t>\n// \t\t\t{(provided, snapshot) => (\n// \t\t\t\t\t<Container\n// \t\t\t\t\t\t{...provided.draggableProps}\n// \t\t\t\t\t\t{...provided.dragHandleProps}\n// \t\t\t\t\t\tref={provided.innerRef}\n// \t\t\t\t\t\tisDragging={snapshot.isDragging}\n// \t\t\t\t\t\tisDragDisabled={isDragDisabled}\n// \t\t\t\t\t>\n// \t\t\t\t\t\t{toggle? (<p onDoubleClick= {toggleInput}>{text}</p>) : (\n// \t\t\t\t\t\t\t<input type= \"text\" value={text} onChange = {handleChange} />\n// \t\t\t\t\t\t)}\n\n// \t\t\t\t\t\t{/* {this.props.task.content} */}\n// \t\t\t\t\t\t{/* {<form>\n// \t\t\t\t\t\t\t<input type=\"text\" placeholder= {this.props.task.content}/>\n// \t\t\t\t\t\t</form>} */}\n// \t\t\t\t\t\t{<button onClick={onClickEditHandler}>Edit</button>}\n// \t\t\t\t\t\t{<button onClick={onClickDeleteHandler}>Delete</button>}\n\t\t\t\t\t\t\n// \t\t\t\t\t</Container>\n// \t\t\t\t)}\n// \t\t\t</Draggable>\n// \t\t\t</div>\n// \t\t);\n// \t}\n// export default Task;\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd';\n\n// Styles\nconst Container = styled.div`\n   border: 1px solid lightgrey;\n   border-radius: 2px;\n   padding: 8px;\n   margin-bottom: 8px;\n  background-color: ${props => (\n      props.isDragDisabled ? 'lightgrey' : props.isDragging ? 'lightgreen' : 'white')};\n`;\n\nfunction onClickEditHandler(e){\n\tconsole.log(`clicked ${e.target}`);\n\tconsole.dir(e.target);\n\tconst answer = prompt(\"수정 내용을 입력하세요.\")\n\tconsole.log(answer)\n}\nfunction onClickDeleteHandler(e){\n\tconsole.log(`clicked ${e.target}`);\n\tconsole.dir(e.target);\n\talert(\"삭제하시겠습니까?\")\n}\n\nexport default class Task extends React.Component {\n   render() {\n      const isDragDisabled = this.props.task.isDone === true;\n      return (\n         <Draggable\n            draggableId={this.props.task.id}\n            index={this.props.index}\n            isDragDisabled={isDragDisabled}\n         >\n            {(provided, snapshot) => (\n               <Container\n                  {...provided.draggableProps}\n                  {...provided.dragHandleProps}\n                  ref={provided.innerRef}\n                  isDragging={snapshot.isDragging}\n                  isDragDisabled={isDragDisabled}\n               >\n                  {this.props.task.content}\n\t\t\t\t  {<button onClick={onClickEditHandler}>Edit</button>}\n// \t\t\t\t  {<button onClick={onClickDeleteHandler}>Delete</button>}\n               </Container>\n            )}\n         </Draggable>\n      )\n   }\n}\n","/Users/sojeong/madCamp_week3/src/Sign/SignUpForm.js",[],"/Users/sojeong/madCamp_week3/src/Sign/validate.js",[],"/Users/sojeong/madCamp_week3/src/Sign/PasswordStr.js",[],"/Users/sojeong/madCamp_week3/src/route/MyTree.js",[],{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","severity":1,"message":"168","line":6,"column":8,"nodeType":"169","messageId":"170","endLine":6,"endColumn":15},{"ruleId":"167","severity":1,"message":"171","line":10,"column":8,"nodeType":"169","messageId":"170","endLine":10,"endColumn":13},{"ruleId":"167","severity":1,"message":"172","line":11,"column":8,"nodeType":"169","messageId":"170","endLine":11,"endColumn":12},{"ruleId":"167","severity":1,"message":"172","line":5,"column":8,"nodeType":"169","messageId":"170","endLine":5,"endColumn":12},{"ruleId":"167","severity":1,"message":"173","line":6,"column":8,"nodeType":"169","messageId":"170","endLine":6,"endColumn":16},{"ruleId":"167","severity":1,"message":"174","line":7,"column":8,"nodeType":"169","messageId":"170","endLine":7,"endColumn":12},{"ruleId":"167","severity":1,"message":"175","line":8,"column":8,"nodeType":"169","messageId":"170","endLine":8,"endColumn":12},{"ruleId":"167","severity":1,"message":"176","line":9,"column":8,"nodeType":"169","messageId":"170","endLine":9,"endColumn":14},{"ruleId":"167","severity":1,"message":"177","line":10,"column":8,"nodeType":"169","messageId":"170","endLine":10,"endColumn":13},{"ruleId":"167","severity":1,"message":"178","line":11,"column":10,"nodeType":"169","messageId":"170","endLine":11,"endColumn":16},{"ruleId":"167","severity":1,"message":"179","line":13,"column":8,"nodeType":"169","messageId":"170","endLine":13,"endColumn":14},{"ruleId":"167","severity":1,"message":"180","line":1,"column":16,"nodeType":"169","messageId":"170","endLine":1,"endColumn":20},{"ruleId":"167","severity":1,"message":"181","line":2,"column":9,"nodeType":"169","messageId":"170","endLine":2,"endColumn":12},{"ruleId":"167","severity":1,"message":"182","line":2,"column":14,"nodeType":"169","messageId":"170","endLine":2,"endColumn":17},{"ruleId":"167","severity":1,"message":"183","line":2,"column":19,"nodeType":"169","messageId":"170","endLine":2,"endColumn":28},{"ruleId":"184","severity":1,"message":"185","line":20,"column":4,"nodeType":"186","endLine":20,"endColumn":28},{"ruleId":"167","severity":1,"message":"187","line":7,"column":8,"nodeType":"169","messageId":"170","endLine":7,"endColumn":14},{"ruleId":"167","severity":1,"message":"171","line":8,"column":8,"nodeType":"169","messageId":"170","endLine":8,"endColumn":13},{"ruleId":"167","severity":1,"message":"188","line":10,"column":10,"nodeType":"169","messageId":"170","endLine":10,"endColumn":35},{"ruleId":"189","severity":1,"message":"190","line":53,"column":7,"nodeType":"191","endLine":53,"endColumn":36},{"ruleId":"167","severity":1,"message":"192","line":141,"column":11,"nodeType":"169","messageId":"170","endLine":141,"endColumn":22},{"ruleId":"193","severity":1,"message":"194","line":11,"column":14,"nodeType":"191","messageId":"195","endLine":11,"endColumn":30,"fix":"196"},{"ruleId":"184","severity":1,"message":"185","line":6,"column":9,"nodeType":"186","endLine":6,"endColumn":48},{"ruleId":"167","severity":1,"message":"197","line":1,"column":16,"nodeType":"169","messageId":"170","endLine":1,"endColumn":25},{"ruleId":"167","severity":1,"message":"198","line":2,"column":8,"nodeType":"169","messageId":"170","endLine":2,"endColumn":16},{"ruleId":"167","severity":1,"message":"199","line":3,"column":8,"nodeType":"169","messageId":"170","endLine":3,"endColumn":13},{"ruleId":"167","severity":1,"message":"200","line":4,"column":8,"nodeType":"169","messageId":"170","endLine":4,"endColumn":13},{"ruleId":"167","severity":1,"message":"178","line":5,"column":10,"nodeType":"169","messageId":"170","endLine":5,"endColumn":16},{"ruleId":"167","severity":1,"message":"201","line":1,"column":8,"nodeType":"169","messageId":"170","endLine":1,"endColumn":13},{"ruleId":"167","severity":1,"message":"202","line":2,"column":13,"nodeType":"169","messageId":"170","endLine":2,"endColumn":20},{"ruleId":"167","severity":1,"message":"203","line":3,"column":13,"nodeType":"169","messageId":"170","endLine":3,"endColumn":20},{"ruleId":"167","severity":1,"message":"204","line":4,"column":13,"nodeType":"169","messageId":"170","endLine":4,"endColumn":20},{"ruleId":"167","severity":1,"message":"198","line":2,"column":8,"nodeType":"169","messageId":"170","endLine":2,"endColumn":16},{"ruleId":"193","severity":1,"message":"194","line":12,"column":14,"nodeType":"191","messageId":"195","endLine":12,"endColumn":30,"fix":"205"},{"ruleId":"167","severity":1,"message":"197","line":1,"column":17,"nodeType":"169","messageId":"170","endLine":1,"endColumn":26},{"ruleId":"193","severity":1,"message":"194","line":31,"column":18,"nodeType":"191","messageId":"195","endLine":31,"endColumn":34,"fix":"206"},{"ruleId":"193","severity":1,"message":"194","line":37,"column":18,"nodeType":"191","messageId":"195","endLine":37,"endColumn":36,"fix":"207"},{"ruleId":"167","severity":1,"message":"197","line":1,"column":17,"nodeType":"169","messageId":"170","endLine":1,"endColumn":26},{"ruleId":"167","severity":1,"message":"208","line":1,"column":10,"nodeType":"169","messageId":"170","endLine":1,"endColumn":27},{"ruleId":"167","severity":1,"message":"209","line":4,"column":8,"nodeType":"169","messageId":"170","endLine":4,"endColumn":12},{"ruleId":"210","severity":1,"message":"211","line":105,"column":59,"nodeType":"212","endLine":106,"endColumn":10},"no-native-reassign",["213"],"no-negated-in-lhs",["214"],"no-unused-vars","'Profile' is defined but never used.","Identifier","unusedVar","'Timer' is defined but never used.","'Grid' is defined but never used.","'TreeList' is defined but never used.","'Test' is defined but never used.","'Tree' is defined but never used.","'Ground' is defined but never used.","'grass' is defined but never used.","'Button' is defined but never used.","'MyTree' is defined but never used.","'Text' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Container' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Dialog' is defined but never used.","'CommunicationSpeakerPhone' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'currentDate' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property k+ offset.","unexpectedWhitespace",{"range":"215","text":"216"},"'Component' is defined but never used.","'ReactDOM' is defined but never used.","'Popup' is defined but never used.","'Modal' is defined but never used.","'React' is defined but never used.","'FaIcons' is defined but never used.","'AiIcons' is defined but never used.","'IoIcons' is defined but never used.",{"range":"217","text":"216"},{"range":"218","text":"216"},{"range":"219","text":"216"},"'ImageExposureZero' is defined but never used.","'Home' is defined but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","no-global-assign","no-unsafe-negation",[477,478],"",[435,436],[1043,1044],[1221,1222]]